<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id/>
    <title>NotionNext BLOG</title>
    <updated>2024-01-26T09:35:44.548Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>bhwa233</name>
        <uri>https://tangly1024.com</uri>
    </author>
    <link rel="alternate" href="https://tangly1024.com/"/>
    <subtitle>这是一个由NotionNext生成的站点</subtitle>
    <icon>https://tangly1024.com/favicon.png</icon>
    <rights>All rights reserved 2024, bhwa233</rights>
    <entry>
        <title type="html"><![CDATA[实现单文本溢出省略样式]]></title>
        <id>https://tangly1024.com/article/96b418c6-050d-4d38-a8dd-29c4ced9304c</id>
        <link href="https://tangly1024.com/article/96b418c6-050d-4d38-a8dd-29c4ced9304c"/>
        <updated>2024-01-25T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-96b418c6050d4d38a8dd29c4ced9304c"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><div class="notion-blank notion-block-bd718165eee6432eb5d8693dc64928dc"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-8dbd9fa5420f4b9f9cf82601e608c2ed" data-id="8dbd9fa5420f4b9f9cf82601e608c2ed"><span><div id="8dbd9fa5420f4b9f9cf82601e608c2ed" class="notion-header-anchor"></div><a class="notion-hash-link" href="#8dbd9fa5420f4b9f9cf82601e608c2ed" title="单行文本省略"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">单行文本省略</span></span></h2><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-ed4fa1b909ad4eaba53241cf0985fbee" data-id="ed4fa1b909ad4eaba53241cf0985fbee"><span><div id="ed4fa1b909ad4eaba53241cf0985fbee" class="notion-header-anchor"></div><a class="notion-hash-link" href="#ed4fa1b909ad4eaba53241cf0985fbee" title="代码"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">代码</span></span></h3><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-6f5a14890c484455a14c6cbe9abb9094" data-id="6f5a14890c484455a14c6cbe9abb9094"><span><div id="6f5a14890c484455a14c6cbe9abb9094" class="notion-header-anchor"></div><a class="notion-hash-link" href="#6f5a14890c484455a14c6cbe9abb9094" title="效果"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">效果</span></span></h3><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-bc664c39ae0544ee98799179de2eccd9"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:104px"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2Fde5ea524-b729-4eea-845e-59eaf20e7149%2F3a7493c3-1aff-4f9c-8c6b-7d5ed45bc089%2FUntitled.png?table=block&amp;id=bc664c39-ae05-44ee-9879-9179de2eccd9&amp;t=bc664c39-ae05-44ee-9879-9179de2eccd9&amp;width=624&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-e3ea24a8e8ff41c78c7ed906ded27f77" data-id="e3ea24a8e8ff41c78c7ed906ded27f77"><span><div id="e3ea24a8e8ff41c78c7ed906ded27f77" class="notion-header-anchor"></div><a class="notion-hash-link" href="#e3ea24a8e8ff41c78c7ed906ded27f77" title="多行文本省略"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">多行文本省略</span></span></h2><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-7fdeac85c9f34bf9af524d738400a8c0" data-id="7fdeac85c9f34bf9af524d738400a8c0"><span><div id="7fdeac85c9f34bf9af524d738400a8c0" class="notion-header-anchor"></div><a class="notion-hash-link" href="#7fdeac85c9f34bf9af524d738400a8c0" title="代码"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">代码</span></span></h3><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-84b67f3b067d472e862ea492c23390b1" data-id="84b67f3b067d472e862ea492c23390b1"><span><div id="84b67f3b067d472e862ea492c23390b1" class="notion-header-anchor"></div><a class="notion-hash-link" href="#84b67f3b067d472e862ea492c23390b1" title="效果"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">效果</span></span></h3><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-d361abde6b7849278b65c54324b8f3ac"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:150px"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2Fde5ea524-b729-4eea-845e-59eaf20e7149%2F9ecf4624-4b38-49f7-955a-cc2635624749%2FUntitled.png?table=block&amp;id=d361abde-6b78-4927-8b65-c54324b8f3ac&amp;t=d361abde-6b78-4927-8b65-c54324b8f3ac&amp;width=672&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-438f68c19ec540e39b24e963c291e25c"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-be61dbfd1fe64f089bce887d902c2a65" data-id="be61dbfd1fe64f089bce887d902c2a65"><span><div id="be61dbfd1fe64f089bce887d902c2a65" class="notion-header-anchor"></div><a class="notion-hash-link" href="#be61dbfd1fe64f089bce887d902c2a65" title="js判断是否省略"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">js判断是否省略</span></span></h2><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-ad47d50d49c5431986d1c4b53eb72669" data-id="ad47d50d49c5431986d1c4b53eb72669"><span><div id="ad47d50d49c5431986d1c4b53eb72669" class="notion-header-anchor"></div><a class="notion-hash-link" href="#ad47d50d49c5431986d1c4b53eb72669" title="单行"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">单行</span></span></h3><div class="notion-text notion-block-3dcf2d1eb488464ca5b8348a756edbf9">通过元素的clientWidth、scrollWidth</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-e3694e1bd974484087f7c1fa710f0bb5" data-id="e3694e1bd974484087f7c1fa710f0bb5"><span><div id="e3694e1bd974484087f7c1fa710f0bb5" class="notion-header-anchor"></div><a class="notion-hash-link" href="#e3694e1bd974484087f7c1fa710f0bb5" title="多行"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">多行</span></span></h3><div class="notion-text notion-block-2b1a26989b654339b0676a5df1692194">通过元素的scrollHeight、clientHeight</div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Promise全解析]]></title>
        <id>https://tangly1024.com/article/688ac66d-597f-4d8c-930e-e13bbfcea1c0</id>
        <link href="https://tangly1024.com/article/688ac66d-597f-4d8c-930e-e13bbfcea1c0"/>
        <updated>2023-11-20T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-688ac66d597f4d8c930ee13bbfcea1c0"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-c84e8296c5ec4a4d9923b36780a4d832" data-id="c84e8296c5ec4a4d9923b36780a4d832"><span><div id="c84e8296c5ec4a4d9923b36780a4d832" class="notion-header-anchor"></div><a class="notion-hash-link" href="#c84e8296c5ec4a4d9923b36780a4d832" title="一句话总结Promise"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>一句话总结Promise</b></span></span></h2><div class="notion-text notion-block-49270ce423994d50a3f2d71c93616bf0">用于解决异步操作结束后的方法执行问题。</div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-881a21f59842436298ce2f7aa5cc5502" data-id="881a21f59842436298ce2f7aa5cc5502"><span><div id="881a21f59842436298ce2f7aa5cc5502" class="notion-header-anchor"></div><a class="notion-hash-link" href="#881a21f59842436298ce2f7aa5cc5502" title="原理"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>原理</b></span></span></h2><div class="notion-text notion-block-47b24d6161de4b208b4f2b7707719b07">通过观察者模式，将要执行的函数放入一个队列里，在异步函数执行结束后执行这个队列。</div><div class="notion-text notion-block-e617711ac895437a95a5b8f50bb8fcca">Promise是JavaScript中用于处理异步操作的一种机制，它提供了一种更优雅、可靠的方式来处理异步编程。Promise的实现原理可以通过以下几个关键点来解释：</div><div class="notion-text notion-block-75b52ba5d09e48959790e1f12f8ab333"><b>构造函数</b>：Promise构造函数接受一个执行器函数（executor），在构造函数被调用时立即执行该函数。执行器函数接受两个参数，分别是resolve和reject，它们是两个函数，用于处理Promise的状态。</div><div class="notion-text notion-block-f77e331dac164e8a98858db2001e50fd"><b>状态管理</b>：Promise具有三种状态：pending（进行中）、fulfilled（已完成）和rejected（已拒绝）。初始状态为pending，执行器函数中的resolve函数将Promise状态从pending变为fulfilled，而reject函数将Promise状态从pending变为rejected。一旦状态发生变化，就不能再次改变。</div><div class="notion-text notion-block-57864eedb88f4727997c1f0f2d56c948"><b>then方法</b>：Promise实例具有一个then方法，它接受两个回调函数作为参数，分别是onFulfilled和onRejected。当Promise状态变为fulfilled时，会调用onFulfilled回调函数；当Promise状态变为rejected时，会调用onRejected回调函数。then方法返回一个新的Promise实例，使得可以进行链式调用。</div><div class="notion-text notion-block-a777ba741a4e45f08b19fb3383997f66"><b>链式调用</b>：then方法返回的新Promise实例可以通过返回一个新的值或另一个Promise实例来传递结果。这种机制允许在多个异步操作之间进行串联，形成更复杂的异步流程。</div><div class="notion-text notion-block-e007851563f94681945a4177d30db381"><b>错误处理</b>：Promise提供了catch方法用于处理异常情况。catch方法是then方法的一个特殊形式，用于捕获Promise链中的任何拒绝（rejected）状态，并执行相应的错误处理逻辑。</div><div class="notion-text notion-block-47d644a1c8dc405398fbf781366b7500"><b>异步执行</b>：Promise的执行是异步的，它会将执行器函数中的代码放入任务队列中，在主线程空闲时执行。这样可以避免阻塞主线程，提高应用的响应性能。</div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-98d86434a05e4341802f5caa26593dc7" data-id="98d86434a05e4341802f5caa26593dc7"><span><div id="98d86434a05e4341802f5caa26593dc7" class="notion-header-anchor"></div><a class="notion-hash-link" href="#98d86434a05e4341802f5caa26593dc7" title="诞生原因"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>诞生原因</b></span></span></h2><div class="notion-text notion-block-23f894af60304078a41f592142f4e248">最开始解决异步函数的方法是回调函数，将要执行的函数作为参数，传入异步操作中。导致会无限嵌套，也就是回掉地狱，影响代码可读性。例如<code class="notion-inline-code">asyncfn1(asyncfn2(asyncfn3()))</code>。</div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-5dece25db7084ad0936a34ca65f15fa9" data-id="5dece25db7084ad0936a34ca65f15fa9"><span><div id="5dece25db7084ad0936a34ca65f15fa9" class="notion-header-anchor"></div><a class="notion-hash-link" href="#5dece25db7084ad0936a34ca65f15fa9" title="特点"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">特点</span></span></h2><ul class="notion-list notion-list-disc notion-block-b0932e9ce3bf46668543d10a3dac0333"><li>不受外界影响，由执行函数内部决定成功和失败，且执行函数return没用，需要通过两个回调参数来决定状态。</li></ul><ul class="notion-list notion-list-disc notion-block-2100f77bee544287b0d45dc21a2345ac"><li>一个 <code class="notion-inline-code">Promise</code> 必然处于以下三种状态之一：</li><ul class="notion-list notion-list-disc notion-block-2100f77bee544287b0d45dc21a2345ac"><li>执行态 <code class="notion-inline-code">(pending)</code>: 初始状态，既没有成功，也没有失败。</li><li>实现态<code class="notion-inline-code">(fulfilled)</code>: 意味着操作成功完成。</li><li>拒绝态<code class="notion-inline-code">(rejected)</code>: 意味着操作失败。</li></ul></ul><ul class="notion-list notion-list-disc notion-block-71a7c091ebf9462d82192bf0c328fd8b"><li>必须给<code class="notion-inline-code">Promise</code>对象传入一个执行函数，否则将会报错。</li></ul><ul class="notion-list notion-list-disc notion-block-dbae853f2a704dc2a888521197e27492"><li>当Promise被创建时就已经开始执行。</li></ul><ul class="notion-list notion-list-disc notion-block-f5ec97018b0e4de8b210a253a0a2d908"><li>Promise中有<code class="notion-inline-code">throw</code>的话，就相当于执行了<code class="notion-inline-code">reject</code>。</li></ul><ul class="notion-list notion-list-disc notion-block-98e52ff2a94e4255b46230f63530bbce"><li>Promise只以<code class="notion-inline-code">第一次为准</code>，第一次成功就永久为<code class="notion-inline-code">fulfilled</code>，第一次失败就永远状态为<code class="notion-inline-code">rejected</code>，执行了<code class="notion-inline-code">resolve</code>，Promise状态会变成<code class="notion-inline-code">fulfilled</code>，执行了<code class="notion-inline-code">reject</code>，Promise状态会变成<code class="notion-inline-code">rejected</code>。</li></ul><ul class="notion-list notion-list-disc notion-block-14fe64d8c7fe455f999622b6648bb6ab"><li>Promise里没有执行<code class="notion-inline-code">resolve</code>、<code class="notion-inline-code">reject</code>以及<code class="notion-inline-code">throw</code>的话，则状态也是<code class="notion-inline-code">pending</code>，<code class="notion-inline-code">pending</code>状态下的promise不会执行对应回调函数。</li></ul><ul class="notion-list notion-list-disc notion-block-aafc833eda464feb923748af73325124"><li>每个then的参数是上一个then的return 内容</li></ul><ul class="notion-list notion-list-disc notion-block-21e032e6bf8646a1bcc69fb0436214eb"><li>错误捕获后，如果没有再throw错误，则执行后面的then。</li></ul><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-c65a76dbc00d46b1995cab6406a29dad" data-id="c65a76dbc00d46b1995cab6406a29dad"><span><div id="c65a76dbc00d46b1995cab6406a29dad" class="notion-header-anchor"></div><a class="notion-hash-link" href="#c65a76dbc00d46b1995cab6406a29dad" title="缺点"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>缺点</b></span></span></h2><ol start="1" class="notion-list notion-list-numbered notion-block-f3bba388de5a4df1b6ab12ed345922a4"><li>错误必须被捕获（不捕获反应不到外面）。</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-13dc677729ea4534a330c24c58082775"><li>需要写回调函数。</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-bf403951450848828d42a07a2890f88a"><li>一旦新建就会立即执行，无法中途取消。</li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-457077851b71459bac09f7b4e08914e0"><li>无法得知<code class="notion-inline-code">pending</code>状态，当处于 <code class="notion-inline-code">pending</code> 时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</li></ol><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-d26df513f4ce4995a5a05b92ddf8a155" data-id="d26df513f4ce4995a5a05b92ddf8a155"><span><div id="d26df513f4ce4995a5a05b92ddf8a155" class="notion-header-anchor"></div><a class="notion-hash-link" href="#d26df513f4ce4995a5a05b92ddf8a155" title="API"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>API</b></span></span></h2><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-47d6eba29d6d4a18b439e16690915187" data-id="47d6eba29d6d4a18b439e16690915187"><span><div id="47d6eba29d6d4a18b439e16690915187" class="notion-header-anchor"></div><a class="notion-hash-link" href="#47d6eba29d6d4a18b439e16690915187" title="executor"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>executor</b></span></span></h3><div class="notion-text notion-block-6adb8b4e72814734a9c8555c5fabc66c">executor作为接收<code class="notion-inline-code">resolve</code>和<code class="notion-inline-code">reject</code>的函数。
<code class="notion-inline-code">resolve</code> 是用于处理操作成功结束的情况，会将<code class="notion-inline-code">promise</code>对象的状态从执行态转为成功态，并将异步操作的结果作为参数传递出去。
<code class="notion-inline-code">reject</code> 是用于处理操作失败的情况，将<code class="notion-inline-code">promise</code> 对象的状态从执行态转为失败态，并将错误作为参数传递出去。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-f01830b5049148b5be1a11745a7003f0" data-id="f01830b5049148b5be1a11745a7003f0"><span><div id="f01830b5049148b5be1a11745a7003f0" class="notion-header-anchor"></div><a class="notion-hash-link" href="#f01830b5049148b5be1a11745a7003f0" title="原型方法"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>原型方法</b></span></span></h3><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-345f945962794b908612b6729cc41bef" data-id="345f945962794b908612b6729cc41bef"><span><div id="345f945962794b908612b6729cc41bef" class="notion-header-anchor"></div><a class="notion-hash-link" href="#345f945962794b908612b6729cc41bef" title="Promise.prototype.then(onFulfilled,onRejected)"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><code class="notion-inline-code"><b>Promise.prototype.then(onFulfilled,onRejected)</b></code><b></b></span></span></h4><div class="notion-text notion-block-4fdc8f116d0a4b49afc15b46dbbaa3d6">将成功和失败的执行函数传入promise，返回一个新的promise，将返回值做为resolve。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-bf38f8c925114835bbf19f5effabd7d4" data-id="bf38f8c925114835bbf19f5effabd7d4"><span><div id="bf38f8c925114835bbf19f5effabd7d4" class="notion-header-anchor"></div><a class="notion-hash-link" href="#bf38f8c925114835bbf19f5effabd7d4" title="Promise.prototype.catch(onRejected)"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><code class="notion-inline-code"><b>Promise.prototype.catch(onRejected)</b></code><b></b></span></span></h4><div class="notion-text notion-block-19cb8f7ccc394b0880964127860d26fb">只处理失败情况，相当于<code class="notion-inline-code">Promise.prototype.then(undefined, onRejected)</code></div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-abdd10070edd4635872c87b93c0811d7" data-id="abdd10070edd4635872c87b93c0811d7"><span><div id="abdd10070edd4635872c87b93c0811d7" class="notion-header-anchor"></div><a class="notion-hash-link" href="#abdd10070edd4635872c87b93c0811d7" title="Promise.prototype.finally(onFinally)"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><code class="notion-inline-code"><b>Promise.prototype.finally(onFinally)</b></code><b></b></span></span></h4><div class="notion-text notion-block-bc62385df4df4e22836dddad915c2148">不管成功失败都会执行的函数，并且会把之前的值原封不动的传递给后面的then</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-2eafebff5ccd478f8d80522b28016841" data-id="2eafebff5ccd478f8d80522b28016841"><span><div id="2eafebff5ccd478f8d80522b28016841" class="notion-header-anchor"></div><a class="notion-hash-link" href="#2eafebff5ccd478f8d80522b28016841" title="方法"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>方法</b></span></span></h3><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-aefc7d3adc9142bdbf2f130552246792" data-id="aefc7d3adc9142bdbf2f130552246792"><span><div id="aefc7d3adc9142bdbf2f130552246792" class="notion-header-anchor"></div><a class="notion-hash-link" href="#aefc7d3adc9142bdbf2f130552246792" title="resolve(value)"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><code class="notion-inline-code"><b>resolve(value)</b></code></span></span></h4><div class="notion-text notion-block-13bf27da846141b9ae1be0c2f9a7706b">返回一个带有成功值的promise对象，如果参数是promise，则返回参数。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-1f2dd8baf7e94c418eace7e66a84f527" data-id="1f2dd8baf7e94c418eace7e66a84f527"><span><div id="1f2dd8baf7e94c418eace7e66a84f527" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1f2dd8baf7e94c418eace7e66a84f527" title="reject(value)"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><code class="notion-inline-code"><b>reject(value)</b></code></span></span></h4><div class="notion-text notion-block-0cb3faf3324e4472877a3277fa756222">返回一个带有拒绝值的promise对象，如果参数是promise，则返回参数。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-eec15a1ff9504b37b1deba526e8afe7d" data-id="eec15a1ff9504b37b1deba526e8afe7d"><span><div id="eec15a1ff9504b37b1deba526e8afe7d" class="notion-header-anchor"></div><a class="notion-hash-link" href="#eec15a1ff9504b37b1deba526e8afe7d" title="all(iterable)"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><code class="notion-inline-code"><b>all(iterable)</b></code></span></span></h4><div class="notion-text notion-block-8d10f4d7eae04f88a06e03a4b199d776">返回一个promise，执行参数迭代器中所有的promise，如果都正确，则返回一个所有promise结果的列表，如果有一个失败，则返回第一个失败结果。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-3b6e5f4179d54bcb8539a11d4a6c70e6" data-id="3b6e5f4179d54bcb8539a11d4a6c70e6"><span><div id="3b6e5f4179d54bcb8539a11d4a6c70e6" class="notion-header-anchor"></div><a class="notion-hash-link" href="#3b6e5f4179d54bcb8539a11d4a6c70e6" title="race(iterable)"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><code class="notion-inline-code"><b>race(iterable)</b></code></span></span></h4><div class="notion-text notion-block-de1feeab1e8045edb9925f9e408f8717">返回一个promise，执行参数迭代器中所有的promise，返回最先执行完成的promise结果。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-cda622a865df47e99b145493aac0a8f1" data-id="cda622a865df47e99b145493aac0a8f1"><span><div id="cda622a865df47e99b145493aac0a8f1" class="notion-header-anchor"></div><a class="notion-hash-link" href="#cda622a865df47e99b145493aac0a8f1" title="any(iterable)"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><code class="notion-inline-code"><b>any(iterable)</b></code></span></span></h4><div class="notion-text notion-block-767d2230fb1b4ebc9933dabc4b48eecf">返回一个promise，执行参数迭代器中所有的promise。只要参数实例有一个变成<code class="notion-inline-code">fulfilled</code>状态，包装实例就会变成<code class="notion-inline-code">fulfilled</code>状态；如果所有参数实例都变成<code class="notion-inline-code">rejected</code>状态，包装实例就会变成<code class="notion-inline-code">rejected</code>状态。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-d5ee724fd5db4441bbb9e7d050544c30" data-id="d5ee724fd5db4441bbb9e7d050544c30"><span><div id="d5ee724fd5db4441bbb9e7d050544c30" class="notion-header-anchor"></div><a class="notion-hash-link" href="#d5ee724fd5db4441bbb9e7d050544c30" title="allSettled(iterable)"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><code class="notion-inline-code"><b>allSettled(iterable)</b></code></span></span></h4><div class="notion-text notion-block-bf918dd09f754e4ebd34d9ab72bb0f39">返回一个promise，执行参数迭代器中所有的promise，只有等到所有参数实例都返回结果，才会结束。返回一个所有promise结果的列表，每个对象都有<code class="notion-inline-code">status</code>属性，该属性的值只可能是字符串<code class="notion-inline-code">fulfilled</code>或字符串<code class="notion-inline-code">rejected</code>。<code class="notion-inline-code">fulfilled</code>时，对象有<code class="notion-inline-code">value</code>属性，<code class="notion-inline-code">rejected</code>时有<code class="notion-inline-code">reason</code>属性，对应两种状态的返回值。</div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-7baf3679d0a049d28859dfe9a6f9e5d5" data-id="7baf3679d0a049d28859dfe9a6f9e5d5"><span><div id="7baf3679d0a049d28859dfe9a6f9e5d5" class="notion-header-anchor"></div><a class="notion-hash-link" href="#7baf3679d0a049d28859dfe9a6f9e5d5" title="完整实现"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>完整实现</b></span></span></h2><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-93723ee5e30e4257b0045e7336bfdc5e" data-id="93723ee5e30e4257b0045e7336bfdc5e"><span><div id="93723ee5e30e4257b0045e7336bfdc5e" class="notion-header-anchor"></div><a class="notion-hash-link" href="#93723ee5e30e4257b0045e7336bfdc5e" title="Promise的实现"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>Promise的实现</b></span></span></h2><ul class="notion-list notion-list-disc notion-block-593307cb2b4f4be39c587dc2d9358876"><li>维护一个<code class="notion-inline-code">fullfilled</code>的事件队列和一个<code class="notion-inline-code">rejected</code>事件队列</li></ul><ul class="notion-list notion-list-disc notion-block-7e7cfa79933248c18a04fe59bf2a346b"><li>在<code class="notion-inline-code">Promise.then</code>方法里需要判断一下当前Promise的状态以及参数类型</li></ul><ul class="notion-list notion-list-disc notion-block-feaa5268842f4e858c50e868e401a957"><li>最后需要实现两个事件队列的自执行，用来处理链式调用的情况</li></ul><ul class="notion-list notion-list-disc notion-block-8fe0ca028aa947a18d2b76476427f05c"><li>在执行方法时使用<code class="notion-inline-code">setTimeout</code>模拟异步任务</li></ul><div class="notion-text notion-block-dc884d947f5b460fbfb47fc0db6ba99d">代码链接</div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-6594423976bf4b29b932f402eea9d655" href="https://github.com/lxw15337674/coding/tree/master/promise"><div><div class="notion-bookmark-title">github.com</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-text">https://github.com/lxw15337674/coding/tree/master/promise</div></div></div></a></div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-a12ae758ae1e47b0ba459eebc89fc0d6" data-id="a12ae758ae1e47b0ba459eebc89fc0d6"><span><div id="a12ae758ae1e47b0ba459eebc89fc0d6" class="notion-header-anchor"></div><a class="notion-hash-link" href="#a12ae758ae1e47b0ba459eebc89fc0d6" title="一些题"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>一些题</b></span></span></h2><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-3db459c3a80842159b338caabcde37df" data-id="3db459c3a80842159b338caabcde37df"><span><div id="3db459c3a80842159b338caabcde37df" class="notion-header-anchor"></div><a class="notion-hash-link" href="#3db459c3a80842159b338caabcde37df" title="并发限制"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>并发限制</b></span></span></h3><div class="notion-text notion-block-963913f480ed4597b1fb5d42001ffba8">实现 Scheduler.add() 函数</div><div class="notion-text notion-block-9e289b95e61c4a02a9c5ad577c48682b"><b>答案</b></div><div class="notion-text notion-block-74d363a2da584871968486adebccf947">根据当前请求数，如果超过限制，就使用新的 promise 来进堵塞后续的请求，把 promise 的 resolve 函数传入一个数组中，然后执行完的请求结束后之前队列最前面的resolve。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-9812ec4263274cdda664919f9a09beee" data-id="9812ec4263274cdda664919f9a09beee"><span><div id="9812ec4263274cdda664919f9a09beee" class="notion-header-anchor"></div><a class="notion-hash-link" href="#9812ec4263274cdda664919f9a09beee" title="重试多次"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>重试多次</b></span></span></h3><div class="notion-text notion-block-26d72ad1bf8c436ca197fe0a82a39a12"><b>答案</b></div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-83edd2023ff44dcd85116182e2cd91d5" data-id="83edd2023ff44dcd85116182e2cd91d5"><span><div id="83edd2023ff44dcd85116182e2cd91d5" class="notion-header-anchor"></div><a class="notion-hash-link" href="#83edd2023ff44dcd85116182e2cd91d5" title="支持取消的重试"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>支持取消的重试</b></span></span></h3><div class="notion-text notion-block-5eed805082e84552a0efb157cd33e733">实现一个轮询方法，返回一个取消方法，能够强制中断轮询</div><div class="notion-text notion-block-8c2dc33762d3439782b777cb9d341f9e">当异步方法成功时，通过回调返回结果并且结束轮询；当异步方法失败时，隔一段时间进行重试，且每次重试的时间是上一次的两倍（第一次的重试时间为 1s）。</div><div class="notion-text notion-block-e51edb6f949e4dbbb5b7f7a93e516b14"><b>实现</b></div><div class="notion-text notion-block-723e375180cf44db90d923ec61bf1b2b">如果在then的第一个函数里抛出了异常，后面的catch能捕获到，而then的第二个函数捕获不到：then的第二个参数本来就是用来处理上一层状态为失败的</div><div class="notion-blank notion-block-a3faf73787444ce8b8d0a2afdddded71"> </div><div class="notion-blank notion-block-19ff7e0dbd344a69a8908dbd66971400"> </div><div class="notion-blank notion-block-44ad8139df304e2aa44d722db95e166b"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-2f12bb718e8c4fcb808116d0679df0ae" data-id="2f12bb718e8c4fcb808116d0679df0ae"><span><div id="2f12bb718e8c4fcb808116d0679df0ae" class="notion-header-anchor"></div><a class="notion-hash-link" href="#2f12bb718e8c4fcb808116d0679df0ae" title="参考"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>参考</b></span></span></h2><div class="notion-text notion-block-cd191ee544d1474a89e84bcb6a5e1afd"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/xieranmaya/blog/issues/3">剖析Promise内部结构，一步一步实现一个完整的、能通过所有Test case的Promise类</a></div><div class="notion-text notion-block-419b0e0e55634983b648e379145e9d32"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/ljianshu/Blog/issues/81">你真的懂Promise吗</a></div><div class="notion-text notion-block-05449b929664476a8a0e68b9be0827a6"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://juejin.cn/post/6844904077537574919">要就来45道Promise面试题一次爽到底</a></div><div class="notion-text notion-block-d7b7b50f7cf84f148b1f89b6dc46566e"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/sisterAn/blog/issues/86">由一道bilibili面试题看Promise异步执行机制</a></div><div class="notion-text notion-block-aff8c3eff2574c65a50233a5304e6f6c"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://sunchang612.github.io/blog/javascript/basics/promise.html#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">Promise</a></div><div class="notion-text notion-block-9123d29fb3644e9d8e399586745a7484"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/LiangJunrong/document-library/blob/master/%E7%B3%BB%E5%88%97-%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/JavaScript/%E5%BC%82%E6%AD%A5%E7%B3%BB%E5%88%97/Promise.md">https://github.com/LiangJunrong/document-library/blob/master/系列-面试资料/JavaScript/异步系列/Promise.md</a></div><div class="notion-blank notion-block-93099f9b91014c73971988006a847552"> </div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法总结]]></title>
        <id>https://tangly1024.com/article/68e8bb51-78ab-478e-9703-59ae37d46ef3</id>
        <link href="https://tangly1024.com/article/68e8bb51-78ab-478e-9703-59ae37d46ef3"/>
        <updated>2023-12-10T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-68e8bb5178ab478e970359ae37d46ef3"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><div class="notion-blank notion-block-a4308e1b50c847fa84415db00f9f1375"> </div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-2334825048d74f09bf8ecf8335b1f377"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:cover" src="https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2Fde5ea524-b729-4eea-845e-59eaf20e7149%2F5f27b692-10c3-41f8-a87e-d4edbce20e62%2FUntitled.png?table=block&amp;id=23348250-48d7-4f09-bf8e-cf8335b1f377&amp;t=23348250-48d7-4f09-bf8e-cf8335b1f377&amp;width=720&amp;cache=v2" alt="notion image" loading="lazy" decoding="async"/></div></figure><div class="notion-blank notion-block-ccee53f3fe2c4dc4aa0724fe66f4bb6f"> </div><div class="notion-blank notion-block-327e4fd362de4f74beb08835da948e4a"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-67ac2c5e169d45f6a49258649286a62a" data-id="67ac2c5e169d45f6a49258649286a62a"><span><div id="67ac2c5e169d45f6a49258649286a62a" class="notion-header-anchor"></div><a class="notion-hash-link" href="#67ac2c5e169d45f6a49258649286a62a" title="时间复杂度"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">时间复杂度</span></span></h2><div class="notion-text notion-block-ebb71a2756cd4c7a8849236c2e27dee6">时间复杂度就是一个函数，用大 O 表示，比如 O(1)、O(n)、O(logN)... 定性描述该算法的运行时间 </div><ul class="notion-list notion-list-disc notion-block-845f424fa346471993a39212990a2b16"><li>O(1) 复杂度</li></ul><div class="notion-text notion-block-73d7573c59a8403bb7f867d3cd1a3a96">因为每次执行代码文件，永远只会执行一次</div><ul class="notion-list notion-list-disc notion-block-d07588bd9b9d4d82b8a903b40365dd43"><li>O(n)</li></ul><ul class="notion-list notion-list-disc notion-block-5abb9b4fd0364508a4a9b1276214a15d"><li>O(n^2)</li></ul><ul class="notion-list notion-list-disc notion-block-196d65ac586c46b4a548b225fa0c2168"><li>O(logN)</li></ul><div class="notion-blank notion-block-39e1279553cd4d239355edc88cad356a"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-176d60c83a274f5ab17c65ac588e9091" data-id="176d60c83a274f5ab17c65ac588e9091"><span><div id="176d60c83a274f5ab17c65ac588e9091" class="notion-header-anchor"></div><a class="notion-hash-link" href="#176d60c83a274f5ab17c65ac588e9091" title="空间复杂度"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>空间复杂度</b></span></span></h2><div class="notion-text notion-block-c63b8d7356ac46349df37e210bd76d03">一个函数，用大 O 表示，比如 O(1) O(n) O(n^2) ... 算法在与运行过程中临时占用存储空间大小的量度</div><ul class="notion-list notion-list-disc notion-block-b480f7800bfa4f1d8d2e83655964ad80"><li>O(1)</li></ul><ul class="notion-list notion-list-disc notion-block-d9c8ae9862d04a1e90cb9d60e9f285d3"><li>O(n)</li></ul><ul class="notion-list notion-list-disc notion-block-5c301f40bf16485686325c146605d149"><li>O(n^2)</li></ul><div class="notion-text notion-block-a907223899984217baa808726048135b"></div><div class="notion-blank notion-block-a5febcfb9aec462fa9c925b1ef7ebb04"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-a4603f29bb7a4f02a199a46a4ae84d5b" data-id="a4603f29bb7a4f02a199a46a4ae84d5b"><span><div id="a4603f29bb7a4f02a199a46a4ae84d5b" class="notion-header-anchor"></div><a class="notion-hash-link" href="#a4603f29bb7a4f02a199a46a4ae84d5b" title="数据结构"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">数据结构</span></span></h2><div class="notion-text notion-block-21f74aa0d5834ac68c9009868a1b19be">常见的数据结构：数组、链表、栈、队列、哈希表、树、堆、图。</div><div class="notion-blank notion-block-5b9c5883801643b584c7efaaefd54f36"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-9d9a81b3efc64474ac559de065bff9a5" data-id="9d9a81b3efc64474ac559de065bff9a5"><span><div id="9d9a81b3efc64474ac559de065bff9a5" class="notion-header-anchor"></div><a class="notion-hash-link" href="#9d9a81b3efc64474ac559de065bff9a5" title="数组"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">数组</span></span></h3><div class="notion-text notion-block-f3869c2e219e4eeb97d70d39a45f14c6">[数组 array]是一种线性数据结构，其将元素存储在连续的内存空间中。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-f35305d8ea3449f38c9fc99c2167822b" data-id="f35305d8ea3449f38c9fc99c2167822b"><span><div id="f35305d8ea3449f38c9fc99c2167822b" class="notion-header-anchor"></div><a class="notion-hash-link" href="#f35305d8ea3449f38c9fc99c2167822b" title="优点"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">优点</span></span></h4><div class="notion-text notion-block-3dbc539bef204b799e4af3a4dbeafada">数组存储在连续的内存空间内，且元素类型相同。这种做法包含丰富的先验信息，系统可以利用这些信息来优化数据结构的操作效率。</div><ul class="notion-list notion-list-disc notion-block-889a54fff2bc4acc84f6275ef795d60c"><li><b>空间效率高</b>：数组为数据分配了连续的内存块，无须额外的结构开销。</li></ul><ul class="notion-list notion-list-disc notion-block-753f2c176bc441e6bffa2f9d97a03575"><li><b>支持随机访问</b>：数组允许在 O（1） 时间内访问任何元素。</li></ul><ul class="notion-list notion-list-disc notion-block-2029133aa6704a5eb8b2cc9d670b7905"><li><b>缓存局部性</b>：当访问数组元素时，计算机不仅会加载它，还会缓存其周围的其他数据，从而借助高速缓存来提升后续操作的执行速度。</li></ul><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-ae30c6ce7b38465aada8389c5fe4aad9" data-id="ae30c6ce7b38465aada8389c5fe4aad9"><span><div id="ae30c6ce7b38465aada8389c5fe4aad9" class="notion-header-anchor"></div><a class="notion-hash-link" href="#ae30c6ce7b38465aada8389c5fe4aad9" title="缺点"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">缺点</span></span></h4><div class="notion-text notion-block-4c919f830b094b78965071a35313ffcc">连续空间存储是一把双刃剑，其存在以下局限性。</div><ul class="notion-list notion-list-disc notion-block-6b44c060217b415e8adc33fc94d23392"><li><b>插入与删除效率低</b>：当数组中元素较多时，插入与删除操作需要移动大量的元素。</li></ul><ul class="notion-list notion-list-disc notion-block-75eca9cc888848abb22e593deb0b5d46"><li><b>长度不可变</b>：数组在初始化后长度就固定了，扩容数组需要将所有数据复制到新数组，开销很大。</li></ul><ul class="notion-list notion-list-disc notion-block-45e71dce2ff4484aa92cfe499528842e"><li><b>空间浪费</b>：如果数组分配的大小超过实际所需，那么多余的空间就被浪费了。</li></ul><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-1cc4d861a496413189783a7570d6438d" data-id="1cc4d861a496413189783a7570d6438d"><span><div id="1cc4d861a496413189783a7570d6438d" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1cc4d861a496413189783a7570d6438d" title="链表"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">链表</span></span></h3><div class="notion-text notion-block-9995b95986904cc38f3f5550de341146">「链表 linked list」元素存储不连续，通过指针连在一起。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-2922bf16ee684c86830ca3b9d20e3fd3" data-id="2922bf16ee684c86830ca3b9d20e3fd3"><span><div id="2922bf16ee684c86830ca3b9d20e3fd3" class="notion-header-anchor"></div><a class="notion-hash-link" href="#2922bf16ee684c86830ca3b9d20e3fd3" title="优点"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">优点</span></span></h4><ol start="1" class="notion-list notion-list-numbered notion-block-6835ca076ab342708462f286206570b8"><li><b>动态性</b>：链表的长度可以动态地增加或减少，不需要预先指定大小。这使得链表在需要频繁地插入和删除元素时更加高效，因为它不需要像数组那样进行元素的移动和重新分配内存。</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-193b7cf60fb4403da584dbf06c4ed921"><li><b>灵活性</b>：链表可以轻松地实现各种数据结构，如栈、队列和双向链表。通过改变节点之间的指针关系，可以方便地进行插入、删除和反转操作。</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-8267ffd5dc5b444aab265710e671d2f4"><li><b>内存管理</b>：链表的节点可以在内存的不同位置分配，不需要连续的内存块。这使得链表更适合处理动态分配和释放内存的场景。</li></ol><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-ee8a52ae7c2848c7954e096f567af0a7" data-id="ee8a52ae7c2848c7954e096f567af0a7"><span><div id="ee8a52ae7c2848c7954e096f567af0a7" class="notion-header-anchor"></div><a class="notion-hash-link" href="#ee8a52ae7c2848c7954e096f567af0a7" title="缺点"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">缺点</span></span></h4><ol start="1" class="notion-list notion-list-numbered notion-block-783893fcb1244017ad36b017e994a846"><li><b>随机访问效率低</b>：链表的节点不像数组那样可以通过索引直接访问，而是需要从头节点开始遍历链表，直到找到目标节点。这使得链表的随机访问效率较低，时间复杂度为 O(n)，其中 n 是链表的长度。</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-9f8da98e119e45e498ae22c3eb0bfe49"><li><b>额外的空间开销</b>：链表中每个节点都需要额外的指针来指向下一个节点，这增加了存储空间的开销。相比于数组，链表需要更多的内存空间来存储相同数量的元素。</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-c32c41db25c34ec29db8e1af4c04217b"><li><b>不支持直接访问前一个节点</b>：普通的单向链表只能从头节点到尾节点进行遍历，无法直接访问前一个节点。如果需要反向遍历链表或在特定位置插入或删除节点，需要使用双向链表。</li></ol><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-d53d7a189aa045ef9f096173d4ab31ae" data-id="d53d7a189aa045ef9f096173d4ab31ae"><span><div id="d53d7a189aa045ef9f096173d4ab31ae" class="notion-header-anchor"></div><a class="notion-hash-link" href="#d53d7a189aa045ef9f096173d4ab31ae" title="常见链表类型"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>常见链表类型</b></span></span></h4><ul class="notion-list notion-list-disc notion-block-a3086704767e4b09afb003534694ec29"><li><b>单向链表</b>：即前面介绍的普通链表。单向链表的节点包含值和指向下一节点的引用两项数据。我们将首个节点称为头节点，将最后一个节点称为尾节点，尾节点指向空 <!-- --> 。</li></ul><ul class="notion-list notion-list-disc notion-block-6fc9448fa6bc470c98738b02bbdcad9e"><li><b>环形链表</b>：如果我们令单向链表的尾节点指向头节点（首尾相接），则得到一个环形链表。在环形链表中，任意节点都可以视作头节点。</li></ul><ul class="notion-list notion-list-disc notion-block-fd408110abf944e3bea029ed255b7f55"><li><b>双向链表</b>：与单向链表相比，双向链表记录了两个方向的引用。双向链表的节点定义同时包含指向后继节点（下一个节点）和前驱节点（上一个节点）的引用（指针）。相较于单向链表，双向链表更具灵活性，可以朝两个方向遍历链表，但相应地也需要占用更多的内存空间。</li></ul><div class="notion-blank notion-block-409a37894596459ba552a11940a41f7a"> </div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-5c980f62270740188dec076b1470213a" data-id="5c980f62270740188dec076b1470213a"><span><div id="5c980f62270740188dec076b1470213a" class="notion-header-anchor"></div><a class="notion-hash-link" href="#5c980f62270740188dec076b1470213a" title="链表 VS 数组"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b><b>链表 VS 数组</b></b></span></span></h4><table class="notion-simple-table notion-block-b2bca53893a04a59a5ac2783a0c62d8f"><tbody><tr class="notion-simple-table-row notion-block-ca7a98baffda46619799d073c1b68a16"><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">ㅤ</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">数组</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">链表</div></td></tr><tr class="notion-simple-table-row notion-block-37780b4f780c4521b2ae6c3ecef6f995"><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">存储方式</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">连续内存空间</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">分散内存空间</div></td></tr><tr class="notion-simple-table-row notion-block-cee2a684225347a2a8eabe1723e1cce2"><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">容量扩展</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">长度不可变</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">可灵活扩展</div></td></tr><tr class="notion-simple-table-row notion-block-386425fd6b82420fb8115d54ef7ae5ee"><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">内存效率</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">元素占用内存少、但可能浪费空间</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">元素占用内存多</div></td></tr><tr class="notion-simple-table-row notion-block-06a90ce738d749f0a200f58b22039129"><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">访问元素</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">O(1)</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">O(n)</div></td></tr><tr class="notion-simple-table-row notion-block-f04fcad26d0e458794cb3c7f6db1038d"><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">添加元素</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">O(n)</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">O(1)</div></td></tr><tr class="notion-simple-table-row notion-block-d3c504c970304820bbc5eb7e20f60149"><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">删除元素</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">O(n)</div></td><td class="" style="width:232.66668701171875px"><div class="notion-simple-table-cell">O(1)</div></td></tr></tbody></table><ul class="notion-list notion-list-disc notion-block-a541470a639240538057517d2352e387"><li>数组：增删非首尾元素时往往需要移动元素。</li></ul><ul class="notion-list notion-list-disc notion-block-028b4268dc7c432d89135b7a753b1e33"><li>链表：增删非首尾元素，不需要移动元素，只需要更改 next 的指向即可。</li></ul><div class="notion-text notion-block-0fb4dd433a8b466787b62f2372f094fa">JavaScript 中可以用 Object 模拟链表</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-f5b1ba7ca09a40a596d35b046e261a26" data-id="f5b1ba7ca09a40a596d35b046e261a26"><span><div id="f5b1ba7ca09a40a596d35b046e261a26" class="notion-header-anchor"></div><a class="notion-hash-link" href="#f5b1ba7ca09a40a596d35b046e261a26" title="栈"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">栈</span></span></h3><div class="notion-text notion-block-b8ad238822594350a6a77e15c2b752c9">「栈 stack」是一种遵循先入后出的逻辑的线性数据结构。栈遵循先入后出的原则，因此我们只能在栈顶添加或删除元素。</div><div class="notion-text notion-block-3a735c6c15624cf79bda242430b1e4a2">数组和链表都可以在任意位置添加和删除元素，<b>因此栈可以视为一种受限制的数组或链表</b>。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-22660791992745f8b3e3a10f796f6df1" data-id="22660791992745f8b3e3a10f796f6df1"><span><div id="22660791992745f8b3e3a10f796f6df1" class="notion-header-anchor"></div><a class="notion-hash-link" href="#22660791992745f8b3e3a10f796f6df1" title="典型应用"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>典型应用</b></span></span></h4><ol start="1" class="notion-list notion-list-numbered notion-block-c98cc3fcc0cc4caba16364cc6724d447"><li>软件中的撤销与反撤销</li></ol><div class="notion-blank notion-block-e56943b3fc074e63b03151b1e9249bcd"> </div><details class="notion-toggle notion-block-a52fdfe99bff4e35b6cfe757f663f876"><summary><b>撤销（undo）和反撤销（redo）具体是如何实现的？</b></summary><div><div class="notion-text notion-block-aca46e3d179144598e9f23c0d20ea47c">使用两个堆栈，栈 <code class="notion-inline-code">A</code> 用于撤销，栈 <code class="notion-inline-code">B</code> 用于反撤销。</div><ol start="1" class="notion-list notion-list-numbered notion-block-0e6e91699e5149da9119c774091ca644"><li>每当用户执行一个操作，将这个操作压入栈 <code class="notion-inline-code">A</code> ，并清空栈 <code class="notion-inline-code">B</code> 。</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-65001cbfa10e49739769ef05642118a8"><li>当用户执行“撤销”时，从栈 <code class="notion-inline-code">A</code> 中弹出最近的操作，并将其压入栈 <code class="notion-inline-code">B</code> 。</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-0d2b634d39ab475998b45bc87d9ee6d0"><li>当用户执行“反撤销”时，从栈 <code class="notion-inline-code">B</code> 中弹出最近的操作，并将其压入栈 <code class="notion-inline-code">A</code> 。</li></ol></div></details><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-c60dfc63d66e40718d133aac4b1c693d" data-id="c60dfc63d66e40718d133aac4b1c693d"><span><div id="c60dfc63d66e40718d133aac4b1c693d" class="notion-header-anchor"></div><a class="notion-hash-link" href="#c60dfc63d66e40718d133aac4b1c693d" title="队列"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">队列</span></span></h3><div class="notion-text notion-block-cbdd779b8d80425e9fc828e216f96962">「队列 queue」是一种遵循先入先出规则的线性数据结构。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-e9fe1b4cbc39418189cc9d5127a355b6" data-id="e9fe1b4cbc39418189cc9d5127a355b6"><span><div id="e9fe1b4cbc39418189cc9d5127a355b6" class="notion-header-anchor"></div><a class="notion-hash-link" href="#e9fe1b4cbc39418189cc9d5127a355b6" title="典型应用"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">典型应用</span></span></h4><ol start="1" class="notion-list notion-list-numbered notion-block-d84c56c96f42488db96dda04411b001d"><li><b>各类待办事项</b>。任何需要实现“先来后到”功能的场景，例如排队取号，淘宝订单，出餐队列</li></ol><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-6721d416d1eb4b40bff8ee9c6cd874fe" data-id="6721d416d1eb4b40bff8ee9c6cd874fe"><span><div id="6721d416d1eb4b40bff8ee9c6cd874fe" class="notion-header-anchor"></div><a class="notion-hash-link" href="#6721d416d1eb4b40bff8ee9c6cd874fe" title="哈希表"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">哈希表</span></span></h3><div class="notion-text notion-block-b48e3a3ee80f476f90e6c89391c889c8">「哈希表 hash table」，又称「散列表」，其通过建立键 key 与值 value 之间的映射，实现高效的元素查询。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-59768805b51a46d39ec5dae35c35b9cb" data-id="59768805b51a46d39ec5dae35c35b9cb"><span><div id="59768805b51a46d39ec5dae35c35b9cb" class="notion-header-anchor"></div><a class="notion-hash-link" href="#59768805b51a46d39ec5dae35c35b9cb" title="优点"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">优点</span></span></h4><ul class="notion-list notion-list-disc notion-block-f17c5552703449828486899851f97a30"><li><b>高效的增删改查</b>，哈希表的增删改查操作能够在O(1)时间完成。</li></ul><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-8b14aeddfb7b40bdbd5d1a4fb9d07e09" data-id="8b14aeddfb7b40bdbd5d1a4fb9d07e09"><span><div id="8b14aeddfb7b40bdbd5d1a4fb9d07e09" class="notion-header-anchor"></div><a class="notion-hash-link" href="#8b14aeddfb7b40bdbd5d1a4fb9d07e09" title="缺点"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">缺点</span></span></h4><ul class="notion-list notion-list-disc notion-block-ff05fa336ebc450486d24340e75a2b74"><li>冲突的处理：由于哈希函数的映射并非完全唯一，不同的键可能会映射到相同的存储桶中，这就是冲突。</li></ul><ul class="notion-list notion-list-disc notion-block-b31bf80fdf4e4817b06d585a8b724475"><li>内存消耗：为了存储哈希表的键和值，需要分配额外的内存空间。在存储大量数据时，哈希表可能占用较多的内存。</li></ul><ul class="notion-list notion-list-disc notion-block-a4a57e8f6d5941769514e15077f34482"><li>遍历顺序不确定：哈希表中的元素没有固定的顺序。</li></ul><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-0d4d4c2a7d41459e8244b4ffc5ce6d07" data-id="0d4d4c2a7d41459e8244b4ffc5ce6d07"><span><div id="0d4d4c2a7d41459e8244b4ffc5ce6d07" class="notion-header-anchor"></div><a class="notion-hash-link" href="#0d4d4c2a7d41459e8244b4ffc5ce6d07" title="典型应用"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">典型应用</span></span></h4><ol start="1" class="notion-list notion-list-numbered notion-block-22f885cbf4964e55ba5c9bd213def015"><li>数据存储和检索，例如数据库</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-8229e48fee4e4c04ba433a6c1b52f741"><li>唯一性检查。</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-bc02f7be01604d0995a6132a11a00c00"><li>缓存实现。</li></ol><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-e0c14d5257ff410a925e735c1876819d" data-id="e0c14d5257ff410a925e735c1876819d"><span><div id="e0c14d5257ff410a925e735c1876819d" class="notion-header-anchor"></div><a class="notion-hash-link" href="#e0c14d5257ff410a925e735c1876819d" title="二叉树"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>二叉树</b></span></span></h3><div class="notion-text notion-block-c31018aae6be45569d21740fb82024b3">[二叉树 binary tree」是一种非线性数据结构，代表“祖先”与“后代”之间的派生关系，体现了“一分为二”的分治逻辑。</div><div class="notion-text notion-block-5f5d40d7efcb42b8800ea8583e48f5cd"><b>二叉树的所有问题，就是让你在前中后序位置注入逻辑代码。</b></div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-878b6fd61ef347a09f380c0cee2e17a3" data-id="878b6fd61ef347a09f380c0cee2e17a3"><span><div id="878b6fd61ef347a09f380c0cee2e17a3" class="notion-header-anchor"></div><a class="notion-hash-link" href="#878b6fd61ef347a09f380c0cee2e17a3" title="类型"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">类型</span></span></h4><ul class="notion-list notion-list-disc notion-block-d07e5c5f7f4c445dbe028a6bf2905161"><li><b><b>完美二叉树</b></b></li></ul><div class="notion-text notion-block-a03e0cc1ea1743dcb86f43b145070ca2">即所有层的节点都被完全填满。</div><ul class="notion-list notion-list-disc notion-block-69f92aa6a9544869836670a9cc24bfb7"><li><b><b>完全二叉树</b></b></li></ul><div class="notion-text notion-block-786b793362bd4ca2bfafb9f6de937ac5">只有最底层的节点未被填满，且最底层节点尽量靠左填充。</div><ul class="notion-list notion-list-disc notion-block-76f4d4a77a2948d6bd9de567fba26bcb"><li><b><b>平衡二叉树</b></b></li></ul><div class="notion-text notion-block-5bb7db944a114224a832aff968a7661b">任意节点的左子树和右子树的高度之差的绝对值不超过 1 。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-f4ffb057cce44a6bbde39c450c1d1b8e" data-id="f4ffb057cce44a6bbde39c450c1d1b8e"><span><div id="f4ffb057cce44a6bbde39c450c1d1b8e" class="notion-header-anchor"></div><a class="notion-hash-link" href="#f4ffb057cce44a6bbde39c450c1d1b8e" title="优点"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">优点</span></span></h4><div class="notion-text notion-block-7ff497dad24344cfb12cfc89d5aec11b">二叉树的数组表示主要有以下优点。</div><ul class="notion-list notion-list-disc notion-block-d252c729db234b04bfa629720a8aec5f"><li>数组存储在连续的内存空间中，对缓存友好，访问与遍历速度较快。</li></ul><ul class="notion-list notion-list-disc notion-block-a61d85a09a634ea0b55cc343c343f8bc"><li>不需要存储指针，比较节省空间。</li></ul><ul class="notion-list notion-list-disc notion-block-298f6456c7474f298be5a6d8194a419d"><li>允许随机访问节点。</li></ul><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-3cf33172e23345f4879369e5a283aeb6" data-id="3cf33172e23345f4879369e5a283aeb6"><span><div id="3cf33172e23345f4879369e5a283aeb6" class="notion-header-anchor"></div><a class="notion-hash-link" href="#3cf33172e23345f4879369e5a283aeb6" title="缺点"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">缺点</span></span></h4><ul class="notion-list notion-list-disc notion-block-de9c0022d09c4653bd0234e25a5b0102"><li>数组存储需要连续内存空间，因此不适合存储数据量过大的树。</li></ul><ul class="notion-list notion-list-disc notion-block-1f39a5081bb04fd2b12956c95e6ebb45"><li>增删节点需要通过数组插入与删除操作实现，效率较低。</li></ul><ul class="notion-list notion-list-disc notion-block-adf0ab5d3b4e450d818c156a8d89451d"><li>当二叉树中存在大量 NONE 时，数组中包含的节点数据比重较低，空间利用率较低。</li></ul><div class="notion-blank notion-block-b45eb92e41354b23b00306fdc8dbdffd"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-3c9483c083f64d109813cc28251e4ae4" data-id="3c9483c083f64d109813cc28251e4ae4"><span><div id="3c9483c083f64d109813cc28251e4ae4" class="notion-header-anchor"></div><a class="notion-hash-link" href="#3c9483c083f64d109813cc28251e4ae4" title="堆"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">堆</span></span></h3><div class="notion-text notion-block-f06774b449364688aa57d8d0c99d2b9b">「堆 heap」是一种满足特定条件的完全二叉树，主要可分为两种类型:</div><ul class="notion-list notion-list-disc notion-block-eccd65a8088044aa87778c5c3c217432"><li>「大顶堆 max heap」：任意节点的值 ≥其子节点的值。</li></ul><ul class="notion-list notion-list-disc notion-block-a1b8756594454858b5b86957d29f07da"><li>「小顶堆 min heap」：任意节点的值  ≤其子节点的值。</li></ul><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-8cc1abc6f29f4e45b4fd52eb2870d935" data-id="8cc1abc6f29f4e45b4fd52eb2870d935"><span><div id="8cc1abc6f29f4e45b4fd52eb2870d935" class="notion-header-anchor"></div><a class="notion-hash-link" href="#8cc1abc6f29f4e45b4fd52eb2870d935" title="典型应用"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">典型应用</span></span></h4><ul class="notion-list notion-list-disc notion-block-d6c7b93af72540eebe3f0d03552afbfd"><li><b>优先队列</b>：堆通常作为实现优先队列的首选数据结构，其入队和出队操作的时间复杂度均为 <!-- --> ，而建队操作为 <!-- --> ，这些操作都非常高效。</li></ul><ul class="notion-list notion-list-disc notion-block-ae9657b83af94a45bc43f24eb8003b42"><li><b>堆排序</b>：给定一组数据，我们可以用它们建立一个堆，然后不断地执行元素出堆操作，从而得到有序数据。然而，我们通常会使用一种更优雅的方式实现堆排序，详见“堆排序”章节。</li></ul><ul class="notion-list notion-list-disc notion-block-5a587ff14cc6492eb2a5432903762ff2"><li><b>获取最大的K个元素</b>：这是一个经典的算法问题，同时也是一种典型应用，例如选择热度前 10 的新闻作为微博热搜，选取销量前 10 的商品等。</li></ul><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-707ed3909c0f456da5b78f777006cbac" data-id="707ed3909c0f456da5b78f777006cbac"><span><div id="707ed3909c0f456da5b78f777006cbac" class="notion-header-anchor"></div><a class="notion-hash-link" href="#707ed3909c0f456da5b78f777006cbac" title="图"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">图</span></span></h3><div class="notion-text notion-block-99cbf962841a4a9bb10e15da5344789d">「图 graph」是一种非线性数据结构，图由顶点和边组成，可以表示为一组顶点和一组边构成的集合。</div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-04ccd85610de4268a930d31199821be7" data-id="04ccd85610de4268a930d31199821be7"><span><div id="04ccd85610de4268a930d31199821be7" class="notion-header-anchor"></div><a class="notion-hash-link" href="#04ccd85610de4268a930d31199821be7" title="算法"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">算法</span></span></h2><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-4bee23c3d6234708aae9781e9ad4bd44" data-id="4bee23c3d6234708aae9781e9ad4bd44"><span><div id="4bee23c3d6234708aae9781e9ad4bd44" class="notion-header-anchor"></div><a class="notion-hash-link" href="#4bee23c3d6234708aae9781e9ad4bd44" title="二分查找"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>二分查找</b></span></span></h3><div class="notion-text notion-block-9be4507c1bf84ea082ddd05693abf64a">思路：它利用数据的有序性，每轮缩小一半搜索范围，直至找到目标元素或搜索区间为空为止。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-357fa869d607400792a30e57e184d477" data-id="357fa869d607400792a30e57e184d477"><span><div id="357fa869d607400792a30e57e184d477" class="notion-header-anchor"></div><a class="notion-hash-link" href="#357fa869d607400792a30e57e184d477" title="排序"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">排序</span></span></h3><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-331cd6103af34453ae9f20b9d0b98448" data-id="331cd6103af34453ae9f20b9d0b98448"><span><div id="331cd6103af34453ae9f20b9d0b98448" class="notion-header-anchor"></div><a class="notion-hash-link" href="#331cd6103af34453ae9f20b9d0b98448" title="选择排序"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">选择排序</span></span></h3><div class="notion-text notion-block-c2cc79fc203b4f539d94d55cf260d645">找到队列中的最小值并 将其放置在第一位，接着找到第二小的值并将其放在第二位，以此类推。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-c0372b14a2fe46cf9d656349c362bff5" data-id="c0372b14a2fe46cf9d656349c362bff5"><span><div id="c0372b14a2fe46cf9d656349c362bff5" class="notion-header-anchor"></div><a class="notion-hash-link" href="#c0372b14a2fe46cf9d656349c362bff5" title="冒泡排序"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">冒泡排序</span></span></h4><div class="notion-text notion-block-46898ee7951f4ae6b900658e76ca7023">开启一个循环，每轮从未排序区间首位开始比较两个相邻的项，如果第一个比第二个大，则交换它们。这样每轮循环都会找到一个最大的数在最后。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-f7758e4575e049d9bbf43c70605ce9f6" data-id="f7758e4575e049d9bbf43c70605ce9f6"><span><div id="f7758e4575e049d9bbf43c70605ce9f6" class="notion-header-anchor"></div><a class="notion-hash-link" href="#f7758e4575e049d9bbf43c70605ce9f6" title="插入排序"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">插入排序</span></span></h4><div class="notion-text notion-block-91e22c5d3e1344358a0ab51f8f596ec4">将第一个元素视为有序序列，剩下的元素作为未排序序列。从头到尾扫描未排序序列，将当前元素插入到有序序列的合适位置。如果待插入的元素与有序序列中的某个元素相等或大于，则将待插入元素插入到相等元素的后面。重复循环，直到未排序序列为空。</div><div class="notion-text notion-block-62a632a1e7b948279dc4ec312c62977f">这个过程类似于玩斗地主时抓牌的过程，将每张新抓的牌与手中已有的牌进行比较，找到合适的位置插入。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-b00ea57f8de2438982389e34f2d8dd7e" data-id="b00ea57f8de2438982389e34f2d8dd7e"><span><div id="b00ea57f8de2438982389e34f2d8dd7e" class="notion-header-anchor"></div><a class="notion-hash-link" href="#b00ea57f8de2438982389e34f2d8dd7e" title="快速排序"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">快速排序</span></span></h4><div class="notion-text notion-block-2cf905e039fb4ab29ea58bc74409b718">采用分治的思想来进行排序。</div><div class="notion-text notion-block-4d919ebda23b49eab2e88ae2773f94ab">快速排序的基本思想是选择一个基准元素，通过一趟排序将待排序的序列分割成独立的两部分，其中一部分的所有元素都小于基准元素，另一部分的所有元素都大于基准元素，然后对这两部分分别进行递归排序，最终得到一个有序序列。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-0976ff5c4cdc43a99acff032a653c416" data-id="0976ff5c4cdc43a99acff032a653c416"><span><div id="0976ff5c4cdc43a99acff032a653c416" class="notion-header-anchor"></div><a class="notion-hash-link" href="#0976ff5c4cdc43a99acff032a653c416" title="归并排序"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">归并排序</span></span></h4><div class="notion-text notion-block-7a11f1608cd24eeba6b674f128a279d1">采用分治的思想来进行排序。</div><div class="notion-text notion-block-bc8b6c62717d466aaf4f2ef02349f95d">将原始数组切分成较小的数组，直到每个小数组只有一个位置，接着将小数组归并成较大的数组，直到最后只有一个排序完毕的大数组。 时间复杂度为 O(n log n)。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-375b8e95cb9f414abda1a264b484479d" data-id="375b8e95cb9f414abda1a264b484479d"><span><div id="375b8e95cb9f414abda1a264b484479d" class="notion-header-anchor"></div><a class="notion-hash-link" href="#375b8e95cb9f414abda1a264b484479d" title="堆排序"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">堆排序</span></span></h4><ol start="1" class="notion-list notion-list-numbered notion-block-7c77aa0041ac4a738ef83648f1dc59f7"><li>输入数组并建立大顶堆。完成后，最大元素位于堆顶。</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-78a4f7e2ceb24f098955359806940299"><li>1. 从堆顶元素开始，从顶到底执行堆化操作（Sift Down）。完成堆化后，堆的性质得到修复。</li></ol><div class="notion-blank notion-block-55ab7c0501cf4d1a97b10b1aaf4b8ada"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-2a56d6078c014a358c1cb7a2f4441be5" data-id="2a56d6078c014a358c1cb7a2f4441be5"><span><div id="2a56d6078c014a358c1cb7a2f4441be5" class="notion-header-anchor"></div><a class="notion-hash-link" href="#2a56d6078c014a358c1cb7a2f4441be5" title="二叉树"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>二叉树</b></span></span></h3><div class="notion-text notion-block-280ab578a3574ed4a0a9be6984b45485"><b>二叉树的所有问题，就是让你在前中后序位置注入逻辑代码。</b></div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-a2ab923107e74770a7eef66d05a8983b" data-id="a2ab923107e74770a7eef66d05a8983b"><span><div id="a2ab923107e74770a7eef66d05a8983b" class="notion-header-anchor"></div><a class="notion-hash-link" href="#a2ab923107e74770a7eef66d05a8983b" title="使用场景"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">使用场景</span></span></h4><ol start="1" class="notion-list notion-list-numbered notion-block-eb9b9e3a906c462ca29fa994e993a55a"><li>求根到叶子节点数字之和</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-feb854521d1546ad848c8944fef83652"><li>平衡二叉树</li></ol><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-f11665cf4c2f4c8e917a1a2ac1048635" data-id="f11665cf4c2f4c8e917a1a2ac1048635"><span><div id="f11665cf4c2f4c8e917a1a2ac1048635" class="notion-header-anchor"></div><a class="notion-hash-link" href="#f11665cf4c2f4c8e917a1a2ac1048635" title="解题思路"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">解题思路</span></span></h4><div class="notion-text notion-block-707d4b9c191b497e918a4c233892324e"><b>1、是否可以通过遍历一遍二叉树得到答案</b>？如果可以，用一个 <code class="notion-inline-code">traverse</code> 函数配合外部变量来实现。</div><div class="notion-text notion-block-1928084d5455445b864f6e1e17471072"><b>2、是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案</b>？如果可以，写出这个递归函数的定义，并充分利用这个函数的返回值。</div><div class="notion-text notion-block-2f018b6ab24849d19e66d7206d148b61"><b>3、无论使用哪一种思维模式，你都要明白二叉树的每一个节点需要做什么，需要在什么时候（前中后序）做</b></div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-db6e5a549ab045b0b6b41fd7b5934a28" data-id="db6e5a549ab045b0b6b41fd7b5934a28"><span><div id="db6e5a549ab045b0b6b41fd7b5934a28" class="notion-header-anchor"></div><a class="notion-hash-link" href="#db6e5a549ab045b0b6b41fd7b5934a28" title="四种遍历方式"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>四种遍历方式</b></span></span></h4><div class="notion-text notion-block-1570b150e9834d388bef0ac3b8e959a8"> <b>前序遍历</b></div><div class="notion-text notion-block-09c4e57832254ccb874b939001da86d4">根结点 ---&gt; 左节点 ---&gt; 右节点</div><div class="notion-text notion-block-3ed432120a1941599b67dac8ba319644"><b>中序遍历</b></div><div class="notion-text notion-block-1d10d6e16e6d493d9772b05bac9b046c">左子树---&gt; 根结点 ---&gt; 右子树</div><div class="notion-text notion-block-bcf4be1ca4c84ca3ad353e09ecc6d245"><b>后序遍历</b></div><div class="notion-text notion-block-a1007fdb6ec74e7790364a3a3ce4d222">左子树 ---&gt; 右子树 ---&gt; 根结点</div><div class="notion-text notion-block-9201c5df6aa24c8d83896b95d55e06b8"><b>层序遍历</b></div><div class="notion-text notion-block-6acf8f7c7c0d4c069df16943739af5a0">从上到下，从左到右访问。</div><div class="notion-text notion-block-1aee8f6a22244f1283e0bc9dcec778a0">前序位置的代码只能从函数参数中获取父节点传递来的数据，而后序位置的代码不仅可以获取参数数据，还可以获取到子树通过函数返回值传递回来的数据。一旦你发现题目和子树有关，那大概率要给函数设置合理的定义和返回值，在后序位置写代码了。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-3a44b7f52e98440b9e9a2f16af1d7652" data-id="3a44b7f52e98440b9e9a2f16af1d7652"><span><div id="3a44b7f52e98440b9e9a2f16af1d7652" class="notion-header-anchor"></div><a class="notion-hash-link" href="#3a44b7f52e98440b9e9a2f16af1d7652" title="双指针"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>双指针</b></span></span></h3><div class="notion-text notion-block-9de83714a58b4fc187a03aaeaa1a663e">数组和链表算法主要都是使用双指针，双指针分为两类：</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-005fccf5deb2408cbdadf7f40b39fcf6" data-id="005fccf5deb2408cbdadf7f40b39fcf6"><span><div id="005fccf5deb2408cbdadf7f40b39fcf6" class="notion-header-anchor"></div><a class="notion-hash-link" href="#005fccf5deb2408cbdadf7f40b39fcf6" title="应用场景"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">应用场景</span></span></h4><ul class="notion-list notion-list-disc notion-block-9ed724ab0e904ac2a43ebdc641680f9d"><li>分发饼干</li></ul><ul class="notion-list notion-list-disc notion-block-f1615344790b4e3c92ffbeee169c7771"><li>验证回文串</li></ul><ul class="notion-list notion-list-disc notion-block-0b32ce4ea20d4b6c83ea72d65d71e347"><li>移动零</li></ul><ul class="notion-list notion-list-disc notion-block-c98f4686c27b404182da998b087218a6"><li>合并两个有序数组</li></ul><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-2fd8a9e211c44bde86733144bd8a8a7e" data-id="2fd8a9e211c44bde86733144bd8a8a7e"><span><div id="2fd8a9e211c44bde86733144bd8a8a7e" class="notion-header-anchor"></div><a class="notion-hash-link" href="#2fd8a9e211c44bde86733144bd8a8a7e" title="左右指针"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>左右指针</b></span></span></h4><div class="notion-text notion-block-d3939480a2604101b411c10301d8830d">两个指针相向而行或相背而行。</div><div class="notion-text notion-block-2f9e8dfe273f405986ef72b07aaa677d">使用场景：</div><ol start="1" class="notion-list notion-list-numbered notion-block-fbfcea3f0f4743c9a5a55e04e1645a14"><li>二分查找</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-cdd29fb7b28248b2b1f748f84c5762b9"><li>两数之和</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-ea005f9987ca4540a146424fe042876e"><li>反转数组</li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-525ddb7aa0b74990957c8c9d5170541c"><li>回文判断</li></ol><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-91e642a32d6c4d0c8ebdf906a154a4f2" data-id="91e642a32d6c4d0c8ebdf906a154a4f2"><span><div id="91e642a32d6c4d0c8ebdf906a154a4f2" class="notion-header-anchor"></div><a class="notion-hash-link" href="#91e642a32d6c4d0c8ebdf906a154a4f2" title="快慢指针"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>快慢指针</b></span></span></h4><div class="notion-text notion-block-295e4c8649034ca7985d29d6def3b007">两个指针同向而行，一快一慢。</div><div class="notion-text notion-block-3e5a59b92c5f4cd99c70c7d61ce63a49">使用场景：</div><ol start="1" class="notion-list notion-list-numbered notion-block-11680aff1d024003abfc6a26d5fcf5ae"><li>涉及到第n个</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-db0f6626395c4ce7ac4d8f62a5b8f9ba"><li>涉及到原地修改的，例如数组去重，数组移除元素</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-ccf1ae8b060442779fc5b975e76d8ede"><li>滑动窗口算法</li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-5ce2f87ff39c4cc3995e85b929dbb4c2"><li>二分查找</li></ol><ol start="5" class="notion-list notion-list-numbered notion-block-9f4cd21475a745899b0cb0f5bbaae6b4"><li>两数之和</li></ol><div class="notion-blank notion-block-b110d72137644079b001537d8d9035cc"> </div><div class="notion-blank notion-block-8b365b9ac0b94748912c1a37c0ab92bb"> </div><div class="notion-blank notion-block-ba477a54842542afb597925def55404b"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-20a293c6db324fce924be1fe4bd755a2" data-id="20a293c6db324fce924be1fe4bd755a2"><span><div id="20a293c6db324fce924be1fe4bd755a2" class="notion-header-anchor"></div><a class="notion-hash-link" href="#20a293c6db324fce924be1fe4bd755a2" title="深度优先搜索（DFS）、广度优先搜索（BFS）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">深度优先搜索（DFS）、广度优先搜索（BFS）</span></span></h3><div class="notion-blank notion-block-8f956184b65e404dada854a1c8b1bae0"> </div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-e5a54d288e724b3499ef920db3358d95" data-id="e5a54d288e724b3499ef920db3358d95"><span><div id="e5a54d288e724b3499ef920db3358d95" class="notion-header-anchor"></div><a class="notion-hash-link" href="#e5a54d288e724b3499ef920db3358d95" title="BFS"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>BFS</b></span></span></h4><div class="notion-text notion-block-049be2330bef460186aa814f4f98eb00">本质上就是一幅「图」，让你从一个起点，走到终点，问最短路径</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-d0410218432e4da88eb94f441dfcffd7" data-id="d0410218432e4da88eb94f441dfcffd7"><span><div id="d0410218432e4da88eb94f441dfcffd7" class="notion-header-anchor"></div><a class="notion-hash-link" href="#d0410218432e4da88eb94f441dfcffd7" title="BFS 与DFS 区别"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>BFS 与DFS 区别</b></span></span></h4><div class="notion-text notion-block-d99ba2a2c8df4254a23a5ac07309e7a4"><b>方式：</b></div><div class="notion-text notion-block-a2e1c7c778124095bed3c97368d33913">DFS是深度遍历，通过递归，遍历所有路径才能找到。</div><div class="notion-text notion-block-a37024ddc5a9422798daf16f942fd811">BFS是广度遍历，通过队列，遍历当前路径。不满足条件，才会进行下一层路径遍历，所以BFS 找到的路径一定是最短的。</div><div class="notion-text notion-block-cb9a3bf12a9742e98a708228e8d32569"><b>空间复杂度：</b></div><div class="notion-text notion-block-e5505533f05f40e1a18eaa72e7b851e0">DFS遍历使用递归，最坏情况就是树的高度，也就是 <code class="notion-inline-code">O(logN)</code>，空间复杂度低。</div><div class="notion-text notion-block-8bcba6d757d64a7f8d30114a758a584c">BFS遍历使用队列，队列中需要存储一层的所有节点，也就是 <code class="notion-inline-code">O(N)</code>，空间复杂度高。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-2be195863e254a7daab1d16b01ec0e24" data-id="2be195863e254a7daab1d16b01ec0e24"><span><div id="2be195863e254a7daab1d16b01ec0e24" class="notion-header-anchor"></div><a class="notion-hash-link" href="#2be195863e254a7daab1d16b01ec0e24" title="BFS使用场景"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">BFS<b>使用场景</b></span></span></h4><ol start="1" class="notion-list notion-list-numbered notion-block-ffa45bcced254dd68c5184e629f90845"><li>层序遍历</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-de9a646e5bea47e39e9fe388d60dc5f3"><li>找最短路径</li></ol><div class="notion-text notion-block-6f3731a332de4a1eaaf0233be9f4382e">解题思路：</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-0ff4eee938e84e54be710b47e5e98fa7" data-id="0ff4eee938e84e54be710b47e5e98fa7"><span><div id="0ff4eee938e84e54be710b47e5e98fa7" class="notion-header-anchor"></div><a class="notion-hash-link" href="#0ff4eee938e84e54be710b47e5e98fa7" title="双向BFS优化"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>双向BFS优化</b></span></span></h4><div class="notion-text notion-block-9e60380407484a50b30d600004519c30"><b>原理</b></div><div class="notion-text notion-block-76cde9c9960f4fac809118e404789d33">传统的 BFS 框架就是从起点开始向四周扩散，遇到终点时停止；而双向 BFS 则是从起点和终点同时开始扩散，当两边有交集的时候停止。按照传统 BFS 算法的策略，会把整棵树的节点都搜索一遍，最后找到 <code class="notion-inline-code">target</code>；而双向 BFS 其实只遍历了半棵树就出现了交集，也就是找到了最短距离。</div><div class="notion-text notion-block-4b6e4d8debfc4603acb6f5fc9a08254a"><b>局限</b></div><div class="notion-text notion-block-03980a2f70e54fae8525785819d2edfa">必须知道终点在哪里。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-3fde1ef165474f30bd50f40ceced0d97" data-id="3fde1ef165474f30bd50f40ceced0d97"><span><div id="3fde1ef165474f30bd50f40ceced0d97" class="notion-header-anchor"></div><a class="notion-hash-link" href="#3fde1ef165474f30bd50f40ceced0d97" title="滑动窗口"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>滑动窗口</b></span></span></h3><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-9778ff3ba527491aa584acd21d0d4002" data-id="9778ff3ba527491aa584acd21d0d4002"><span><div id="9778ff3ba527491aa584acd21d0d4002" class="notion-header-anchor"></div><a class="notion-hash-link" href="#9778ff3ba527491aa584acd21d0d4002" title="解题思路"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">解题思路</span></span></h4><ul class="notion-list notion-list-disc notion-block-3918ff016c38403ab39fc4c2989e97f6"><li>定义左右指针</li></ul><ul class="notion-list notion-list-disc notion-block-8565f58b67534a6aaae8663d20053234"><li>先移动右指针，</li></ul><ul class="notion-list notion-list-disc notion-block-ea77cee40ff144778ecc445c1fff609d"><li>每当满足收缩条件时，就移动左指针，</li></ul><ul class="notion-list notion-list-disc notion-block-a58388367e4241c286f6171324ce3073"><li>直到不满足条件后，再重新开始移动右指针。</li></ul><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-f2b8f58937a64a1fb57673e66582a922" data-id="f2b8f58937a64a1fb57673e66582a922"><span><div id="f2b8f58937a64a1fb57673e66582a922" class="notion-header-anchor"></div><a class="notion-hash-link" href="#f2b8f58937a64a1fb57673e66582a922" title="使用场景"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">使用场景</span></span></h4><ul class="notion-list notion-list-disc notion-block-2bd7bcd4860b4f3aaf382bc0ef9b0e85"><li>查找子串</li></ul><ul class="notion-list notion-list-disc notion-block-e57c7dc14b55456abfb6eff777243f4f"><li>长度最小的子数组</li></ul><div class="notion-text notion-block-19b64e4234e749349269c845ddb74771">思路</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-1340e8192b36495e9f70ea78e5b139b9" data-id="1340e8192b36495e9f70ea78e5b139b9"><span><div id="1340e8192b36495e9f70ea78e5b139b9" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1340e8192b36495e9f70ea78e5b139b9" title="动态规划"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>动态规划</b></span></span></h3><div class="notion-text notion-block-6cc5ea645bef4297952ea34dba652d97">它将一个问题分解为一系列更小的子问题，并通过存储子问题的解来避免重复计算，从而大幅提升时间效率。</div><div class="notion-text notion-block-2ecbf665a4d146969cf74528cebf4010">最典型的应用：斐波那契数列</div><div class="notion-text notion-block-f95464fa23bb48cba7540b8eca3160a0">0 1 1 2 3 5 例如第三个 等于 第一个 + 第二个 定义子问题：F(n) = F(n - 1) + F(n - 2) 反复执行：从 2 循环到 n ，执行上面的公式。</div><div class="notion-text notion-block-42b18926c4124b6484e5e8029f6fc53b"><b>动态规划问题都是斐波那契数列的变种。</b></div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-c56545a747fa419ba44b9c66cd1d96ca" data-id="c56545a747fa419ba44b9c66cd1d96ca"><span><div id="c56545a747fa419ba44b9c66cd1d96ca" class="notion-header-anchor"></div><a class="notion-hash-link" href="#c56545a747fa419ba44b9c66cd1d96ca" title="应用场景"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">应用场景</span></span></h3><ul class="notion-list notion-list-disc notion-block-f5d924ed3b1043faa43ca1885f58ac04"><li>爬楼梯</li></ul><ul class="notion-list notion-list-disc notion-block-7708e2a2cb0049718d939f65a9f06afc"><li>找钱</li></ul><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-636db30d18cd452293b5cfd090ae39b1" data-id="636db30d18cd452293b5cfd090ae39b1"><span><div id="636db30d18cd452293b5cfd090ae39b1" class="notion-header-anchor"></div><a class="notion-hash-link" href="#636db30d18cd452293b5cfd090ae39b1" title="动态规划 VS 分而治之"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>动态规划 VS 分而治之</b></span></span></h4><ul class="notion-list notion-list-disc notion-block-624dfd309b8f40f3b3856904fbdd6877"><li>分治算法递归地将原问题划分为多个相互独立的子问题，直至最小子问题，并在回溯中合并子问题的解，最终得到原问题的解。</li></ul><ul class="notion-list notion-list-disc notion-block-7976a3c6428042e7b861252c95c6103e"><li>动态规划也对问题进行递归分解，但与分治算法的主要区别是，动态规划中的子问题是相互依赖的，在分解过程中会出现许多重叠子问题。</li></ul><ul class="notion-list notion-list-disc notion-block-a765c9db932b4d78991dd0f0fda9f969"><li>回溯算法在尝试和回退中穷举所有可能的解，并通过剪枝避免不必要的搜索分支。原问题的解由一系列决策步骤构成，我们可以将每个决策步骤之前的子序列看作一个子问题。</li></ul><div class="notion-text notion-block-017a1e02912e440682b4f060743bc3a0">实际上，动态规划常用来求解最优化问题，它们不仅包含重叠子问题，还具有另外两大特性：最优子结构、无后效性。</div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-ab91fd2548d94ca9a6f2b49d094dbd13" href="https://lq782655835.github.io/blogs/js/data-structure.html"><div><div class="notion-bookmark-title">数据结构 | springleo&#x27;s blog</div><div class="notion-bookmark-description">团队规范</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://lq782655835.github.io/blogs/favicon.ico?t=ab91fd25-48d9-4ca9-a6f2-b49d094dbd13" alt="数据结构 | springleo&#x27;s blog" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://lq782655835.github.io/blogs/js/data-structure.html</div></div></div></a></div><div class="notion-blank notion-block-2e74f94a4bcb4fa2ad9a31bb5652bc35"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-0da42d62f44c4c83ba41c79685df9110" data-id="0da42d62f44c4c83ba41c79685df9110"><span><div id="0da42d62f44c4c83ba41c79685df9110" class="notion-header-anchor"></div><a class="notion-hash-link" href="#0da42d62f44c4c83ba41c79685df9110" title="贪心"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">贪心</span></span></h3><div class="notion-text notion-block-af845641b1de4ed2bcd01f6bd2bfd9fb">其基本思想是在问题的每个决策阶段，都选择当前看起来最优的选择，即贪心地做出局部最优的决策，以期获得全局最优解。</div><div class="notion-text notion-block-04fff7ac9dde444a98cf87706612ee88">比如找零钱，你面前放着 100 张人民币，<b>我们贪心地选择不大于且最接近它的硬币</b>，不断循环该步骤，直至凑出目标金额为止。你只能拿十张，怎么才能拿最多的面额？显然每次选择剩下钞票中面值最大的一张，最后你的选择一定是最优的。</div><div class="notion-blank notion-block-f5f55bf21fba4f9a9d40c0a9a4ab23ef"> </div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-ca7b61be07434e1f89ddc088d9904a61" data-id="ca7b61be07434e1f89ddc088d9904a61"><span><div id="ca7b61be07434e1f89ddc088d9904a61" class="notion-header-anchor"></div><a class="notion-hash-link" href="#ca7b61be07434e1f89ddc088d9904a61" title="应用场景"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">应用场景</span></span></h4><ul class="notion-list notion-list-disc notion-block-09f9d7f459434473b4ee5c164ee56583"><li><b>硬币找零问题</b>：在某些硬币组合下，贪心算法总是可以得到最优解。</li></ul><ul class="notion-list notion-list-disc notion-block-370f9f36504145e6a7c68d4abffebe31"><li><b>区间调度问题</b>：假设你有一些任务，每个任务在一段时间内进行，你的目标是完成尽可能多的任务。如果每次都选择结束时间最早的任务，那么贪心算法就可以得到最优解。</li></ul><ul class="notion-list notion-list-disc notion-block-228b4e7b7c634801837b90c539fcbae5"><li><b>分数背包问题</b>：给定一组物品和一个载重量，你的目标是选择一组物品，使得总重量不超过载重量，且总价值最大。如果每次都选择性价比最高（价值 / 重量）的物品，那么贪心算法在一些情况下可以得到最优解。</li></ul><ul class="notion-list notion-list-disc notion-block-75d18b67751146ad8d301c71a3d23c6c"><li><b>股票买卖问题</b>：给定一组股票的历史价格，你可以进行多次买卖，但如果你已经持有股票，那么在卖出之前不能再买，目标是获取最大利润。</li></ul><div class="notion-blank notion-block-c3395b4e12744492999df791ca67b25a"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-74379d5acedf4ee3b01a8810690acff0" data-id="74379d5acedf4ee3b01a8810690acff0"><span><div id="74379d5acedf4ee3b01a8810690acff0" class="notion-header-anchor"></div><a class="notion-hash-link" href="#74379d5acedf4ee3b01a8810690acff0" title="分治"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">分治</span></span></h3><div class="notion-text notion-block-d9ddded53e9448d5b92e8d18e861a777"><b>它将一个问题分成多个和原问题类似的小问题，递归解决小问题，再将结果合并以解决原来的问题。</b></div><div class="notion-text notion-block-1e319fd27ad042649c4ec483a954020e">包括分（划分）和治（合并）两个阶段，通常基于递归实现。</div><ol start="1" class="notion-list notion-list-numbered notion-block-90acd239d7b54acfab01a8c6d5939962"><li><b>分（划分阶段）</b>：递归地将原问题分解为两个或多个子问题，直至到达最小子问题时终止。</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-2da058f9f8524edbbac52926b36e61ee"><li><b>治（合并阶段）</b>：从已知解的最小子问题开始，从底至顶地将子问题的解进行合并，从而构建出原问题的解。</li></ol><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-b0a1997cf7dd45e5ac4d8a8c0e424a30" data-id="b0a1997cf7dd45e5ac4d8a8c0e424a30"><span><div id="b0a1997cf7dd45e5ac4d8a8c0e424a30" class="notion-header-anchor"></div><a class="notion-hash-link" href="#b0a1997cf7dd45e5ac4d8a8c0e424a30" title="使用场景"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>使用场景</b></span></span></h4><ol start="1" class="notion-list notion-list-numbered notion-block-4110fd6b7b044935950bc9d1b2e63986"><li>归并排序 分：把数组从中间一份为二。合：合并两个有序子数组。</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-b27bfc78a2c343189e54b3a158441abd"><li>快速排序 分：选基准数，分成两个数组。 合：对两个子数组进行合并。</li></ol><div class="notion-blank notion-block-c09edcf6356c411d8014f755b7890573"> </div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-be85cd642bbe4535990230bd3049662e" data-id="be85cd642bbe4535990230bd3049662e"><span><div id="be85cd642bbe4535990230bd3049662e" class="notion-header-anchor"></div><a class="notion-hash-link" href="#be85cd642bbe4535990230bd3049662e" title="回溯"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">回溯</span></span></h3><div class="notion-text notion-block-fc6a73d2627b44f29931f32db4ca2e00">本质就是穷举法，通过对解空间进行深度优先遍历来寻找符合条件的解。在搜索过程中，遇到满足条件的解则记录，直至找到所有解或遍历完成后结束。</div><div class="notion-text notion-block-5e6feafa5b43475d958a5a790f929ab7">回溯算法的搜索过程包括尝试与回退两个部分。它通过深度优先搜索来尝试各种选择，当遇到不满足约束条件的情况时，则撤销上一步的选择，退回到之前的状态，并继续尝试其他选择。尝试与回退是两个方向相反的操作。</div><div class="notion-text notion-block-e4063ccafe0f4265aaafcde7930c70f1">回溯问题通常包含多个约束条件，它们可用于实现剪枝操作。剪枝可以提前结束不必要的搜索分支，大幅提升搜索效率。</div><h4 class="notion-h notion-h3 notion-h-indent-2 notion-block-f5e217a5bf5148a2a0ef3b7e1240ba3e" data-id="f5e217a5bf5148a2a0ef3b7e1240ba3e"><span><div id="f5e217a5bf5148a2a0ef3b7e1240ba3e" class="notion-header-anchor"></div><a class="notion-hash-link" href="#f5e217a5bf5148a2a0ef3b7e1240ba3e" title="解题思路"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">解题思路</span></span></h4><div class="notion-blank notion-block-5b9a77a2a5024f358a31842b8fc802ff"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-c33eeba24c1149f093332184b0bb8274" data-id="c33eeba24c1149f093332184b0bb8274"><span><div id="c33eeba24c1149f093332184b0bb8274" class="notion-header-anchor"></div><a class="notion-hash-link" href="#c33eeba24c1149f093332184b0bb8274" title="扩展"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">扩展</span></span></h2><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-c904b15ba8be417aafe5ca75c44ae514" href="https://www.hello-algo.com/"><div><div class="notion-bookmark-title">Hello 算法</div><div class="notion-bookmark-description">动画图解、一键运行的数据结构与算法教程</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.hello-algo.com/assets/images/favicon.png?t=c904b15b-a8be-417a-afe5-ca75c44ae514" alt="Hello 算法" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://www.hello-algo.com/</div></div></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-0df09fadf0db46ee8acf9e7d8b1e2880" href="https://mp.weixin.qq.com/s/DWGWK4yAlfEYO1Ynv1CMfg"><div><div class="notion-bookmark-title">95% 的算法都是基于这 6 种算法思想</div><div class="notion-bookmark-description">前端也能学到算法入门教程</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://res.wx.qq.com/a/wx_fed/assets/res/MjliNWVm.svg?t=0df09fad-f0db-46ee-8acf-9e7d8b1e2880" alt="95% 的算法都是基于这 6 种算法思想" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://mp.weixin.qq.com/s/DWGWK4yAlfEYO1Ynv1CMfg</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="http://mmbiz.qpic.cn/mmbiz_jpg/bwG40XYiaOKnuJoEMkRQzmiawsflfy7jgj8XojQG8uIHB4Bj8iaBHpicuB9wlzoLgr5OdicJcTIKdnL193yUR6dXvSg/0?wx_fmt=jpeg&amp;t=0df09fad-f0db-46ee-8acf-9e7d8b1e2880" alt="95% 的算法都是基于这 6 种算法思想" loading="lazy" decoding="async"/></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-aea49ac2c3524250b49595c5ec55f126" href="https://juejin.cn/post/6844903919722692621"><div><div class="notion-bookmark-title">前端该如何准备数据结构和算法？ - 掘金</div><div class="notion-bookmark-description">据我了解，前端程序员有相当一部分对“数据结构”和“算法”的基础概念都不是很清晰，这直接导致很多人在看到有关这部分的内容就会望而却步。 实际上，当你了解了“数据结构”和“算法”存在的真正意义，以及一些实际的应用场景，对它有了一个整体的认知之后，你可能会对它产生强烈的兴趣。当然，它…</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/static/favicons/apple-touch-icon.png?t=aea49ac2-c352-4250-b495-95c5ec55f126" alt="前端该如何准备数据结构和算法？ - 掘金" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://juejin.cn/post/6844903919722692621</div></div></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-b09100294d6b4bc5947fb5f107b66fab" href="https://www.conardli.top/docs/datastructure/"><div><div class="notion-bookmark-title">数据结构专题 | awesome-coding-js</div><div class="notion-bookmark-description">二叉树</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-text">https://www.conardli.top/docs/datastructure/</div></div></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-8c252d1938844477a4b654df25dfa4b0" href="https://vue3js.cn/interview/algorithm/Algorithm.html#一、是什么"><div><div class="notion-bookmark-title">面试官：说说你对算法的理解？应用场景？ | web前端面试 - 面试官系列</div><div class="notion-bookmark-description">web前端面试,vue面试题,react面试题,js面试题,大厂面试题,阿里面试题,京东面试题</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://vue3js.cn/interview/onepunch.jpeg?t=8c252d19-3884-4477-a4b6-54df25dfa4b0" alt="面试官：说说你对算法的理解？应用场景？ | web前端面试 - 面试官系列" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://vue3js.cn/interview/algorithm/Algorithm.html#一、是什么</div></div></div></a></div><div class="notion-blank notion-block-987b1b3eb30c4e31bd1f8c9218155933"> </div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-78ac28b2fcea46c280ca3954bab11389" href="https://juejin.cn/post/6947842412102287373?searchId=20231128125330B1E0CBADCF36FC4BBF4F"><div><div class="notion-bookmark-title">字节跳动最爱考的 64 道算法题（JS版） - 掘金</div><div class="notion-bookmark-description">现在大厂面试中，算法题几乎为必考项，且近几年频现 LeetCode 真题，此篇为拿到字节、腾讯、京东 Offer 的笔者本人在准备面试过程中亲自刷过以及遇到过高频算法题。文章内容会分模块整理，对于笔者在面试过程中遇到的真题，会给予着重 【🔥】标出。 同时，可以毫不客气的说，如…</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/static/favicons/apple-touch-icon.png?t=78ac28b2-fcea-46c2-80ca-3954bab11389" alt="字节跳动最爱考的 64 道算法题（JS版） - 掘金" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://juejin.cn/post/6947842412102287373?searchId=20231128125330B1E0CBADCF36FC4BBF4F</div></div></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-685346efc95d4da3a660175d4b90299e" href="https://codetop.cc/home"><div><div class="notion-bookmark-title">CodeTop 面试题目总结</div><div class="notion-bookmark-description">CodeTop用于汇总互联网大厂高频面试题，帮助大家更有针对性地刷Leetcode</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://codetop.cc/logo.jpg?t=685346ef-c95d-4da3-a660-175d4b90299e" alt="CodeTop 面试题目总结" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://codetop.cc/home</div></div></div></a></div><a target="_blank" rel="noopener noreferrer" href="https://github.com/hovinghuang/fe-agorithm-interview" class="notion-external notion-external-block notion-row notion-block-e886d953fceb4414968da77105419e7b"><div class="notion-external-image"><svg viewBox="0 0 260 260"><g><path d="M128.00106,0 C57.3172926,0 0,57.3066942 0,128.00106 C0,184.555281 36.6761997,232.535542 87.534937,249.460899 C93.9320223,250.645779 96.280588,246.684165 96.280588,243.303333 C96.280588,240.251045 96.1618878,230.167899 96.106777,219.472176 C60.4967585,227.215235 52.9826207,204.369712 52.9826207,204.369712 C47.1599584,189.574598 38.770408,185.640538 38.770408,185.640538 C27.1568785,177.696113 39.6458206,177.859325 39.6458206,177.859325 C52.4993419,178.762293 59.267365,191.04987 59.267365,191.04987 C70.6837675,210.618423 89.2115753,204.961093 96.5158685,201.690482 C97.6647155,193.417512 100.981959,187.77078 104.642583,184.574357 C76.211799,181.33766 46.324819,170.362144 46.324819,121.315702 C46.324819,107.340889 51.3250588,95.9223682 59.5132437,86.9583937 C58.1842268,83.7344152 53.8029229,70.715562 60.7532354,53.0843636 C60.7532354,53.0843636 71.5019501,49.6441813 95.9626412,66.2049595 C106.172967,63.368876 117.123047,61.9465949 128.00106,61.8978432 C138.879073,61.9465949 149.837632,63.368876 160.067033,66.2049595 C184.49805,49.6441813 195.231926,53.0843636 195.231926,53.0843636 C202.199197,70.715562 197.815773,83.7344152 196.486756,86.9583937 C204.694018,95.9223682 209.660343,107.340889 209.660343,121.315702 C209.660343,170.478725 179.716133,181.303747 151.213281,184.472614 C155.80443,188.444828 159.895342,196.234518 159.895342,208.176593 C159.895342,225.303317 159.746968,239.087361 159.746968,243.303333 C159.746968,246.709601 162.05102,250.70089 168.53925,249.443941 C219.370432,232.499507 256,184.536204 256,128.00106 C256,57.3066942 198.691187,0 128.00106,0 Z M47.9405593,182.340212 C47.6586465,182.976105 46.6581745,183.166873 45.7467277,182.730227 C44.8183235,182.312656 44.2968914,181.445722 44.5978808,180.80771 C44.8734344,180.152739 45.876026,179.97045 46.8023103,180.409216 C47.7328342,180.826786 48.2627451,181.702199 47.9405593,182.340212 Z M54.2367892,187.958254 C53.6263318,188.524199 52.4329723,188.261363 51.6232682,187.366874 C50.7860088,186.474504 50.6291553,185.281144 51.2480912,184.70672 C51.8776254,184.140775 53.0349512,184.405731 53.8743302,185.298101 C54.7115892,186.201069 54.8748019,187.38595 54.2367892,187.958254 Z M58.5562413,195.146347 C57.7719732,195.691096 56.4895886,195.180261 55.6968417,194.042013 C54.9125733,192.903764 54.9125733,191.538713 55.713799,190.991845 C56.5086651,190.444977 57.7719732,190.936735 58.5753181,192.066505 C59.3574669,193.22383 59.3574669,194.58888 58.5562413,195.146347 Z M65.8613592,203.471174 C65.1597571,204.244846 63.6654083,204.03712 62.5716717,202.981538 C61.4524999,201.94927 61.1409122,200.484596 61.8446341,199.710926 C62.5547146,198.935137 64.0575422,199.15346 65.1597571,200.200564 C66.2704506,201.230712 66.6095936,202.705984 65.8613592,203.471174 Z M75.3025151,206.281542 C74.9930474,207.284134 73.553809,207.739857 72.1039724,207.313809 C70.6562556,206.875043 69.7087748,205.700761 70.0012857,204.687571 C70.302275,203.678621 71.7478721,203.20382 73.2083069,203.659543 C74.6539041,204.09619 75.6035048,205.261994 75.3025151,206.281542 Z M86.046947,207.473627 C86.0829806,208.529209 84.8535871,209.404622 83.3316829,209.4237 C81.8013,209.457614 80.563428,208.603398 80.5464708,207.564772 C80.5464708,206.498591 81.7483088,205.631657 83.2786917,205.606221 C84.8005962,205.576546 86.046947,206.424403 86.046947,207.473627 Z M96.6021471,207.069023 C96.7844366,208.099171 95.7267341,209.156872 94.215428,209.438785 C92.7295577,209.710099 91.3539086,209.074206 91.1652603,208.052538 C90.9808515,206.996955 92.0576306,205.939253 93.5413813,205.66582 C95.054807,205.402984 96.4092596,206.021919 96.6021471,207.069023 Z" fill="#161614"></path></g></svg></div><div class="notion-external-description"><div class="notion-external-title">fe-agorithm-interview</div><div class="notion-external-subtitle"><span>hovinghuang</span><span> • </span><span>Updated <!-- -->Jan 25, 2024</span></div></div></a><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-1f18ea5d774b4aaeb6a9c51c5ce20556" href="https://github.com/lewiscrow/WorkHardAndFindJob/blob/master/复习/面试/手撕字节跳动面试时出现过的算法题.md"><div><div class="notion-bookmark-title">github.com</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-text">https://github.com/lewiscrow/WorkHardAndFindJob/blob/master/复习/面试/手撕字节跳动面试时出现过的算法题.md</div></div></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-86cc1cdd0ca74d2384fe30053496186e" href="https://www.nowcoder.com/discuss/353157412674805760"><div><div class="notion-bookmark-title">字节跳动面试爱考的高频算法题_牛客网</div><div class="notion-bookmark-description">前言 hello~大家好，一直被催更字节跳动的帖子，历经数天的时间，这篇帖子终于来啦~ 欢迎大家star⭐我的Github仓库呀~目前已4.6k star 正文 我这次汇总了牛客上7.28日~10.23日的389篇字节跳动面经，共涉及207道leetcode编程题，_牛客网_牛客在手,offer不愁</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://static.nowcoder.com/fe/file/images/nowpick/web/www-favicon.ico?t=86cc1cdd-0ca7-4d23-84fe-30053496186e" alt="字节跳动面试爱考的高频算法题_牛客网" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://www.nowcoder.com/discuss/353157412674805760</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://static.nowcoder.com/fe/common/share-logo.png?t=86cc1cdd-0ca7-4d23-84fe-30053496186e" alt="字节跳动面试爱考的高频算法题_牛客网" loading="lazy" decoding="async"/></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-12fca9ad1ec94f36aff90909fa529eb2" href="https://www.nowcoder.com/exam/oj/ta?page=1&amp;tpId=13&amp;type=13"><div><div class="notion-bookmark-title">剑指offer_在线编程_牛客网</div><div class="notion-bookmark-description">该专题为剑指offer专题，题目均来自《剑指offer》，里面每道题带有练习模式和考试模式，可还原考试模式进行模拟，也可通过练习模式进行练习。</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://static.nowcoder.com/fe/file/images/nowpick/web/www-favicon.ico?t=12fca9ad-1ec9-4f36-aff9-0909fa529eb2" alt="剑指offer_在线编程_牛客网" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://www.nowcoder.com/exam/oj/ta?page=1&amp;tpId=13&amp;type=13</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://static.nowcoder.com/fe/common/share-logo.png?t=12fca9ad-1ec9-4f36-aff9-0909fa529eb2" alt="剑指offer_在线编程_牛客网" loading="lazy" decoding="async"/></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-2a525cdd6add48f5b4615627cd12cdb2" href="https://www.nowcoder.com/exam/oj"><div><div class="notion-bookmark-title">牛客网在线编程_算法篇_面试必刷TOP101</div><div class="notion-bookmark-description">牛客网在线编程算法篇-面试必刷TOP101提供超多数据结构,系统设计,编程学习,练习题等,为技术求职者提供能力提升解决方案,同时为企业级用户提供更高效的招聘解决方案,帮助求职者与企业搭建人才招募和人才培养渠道</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://static.nowcoder.com/fe/file/images/nowpick/web/www-favicon.ico?t=2a525cdd-6add-48f5-b461-5627cd12cdb2" alt="牛客网在线编程_算法篇_面试必刷TOP101" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://www.nowcoder.com/exam/oj</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://static.nowcoder.com/fe/common/share-logo.png?t=2a525cdd-6add-48f5-b461-5627cd12cdb2" alt="牛客网在线编程_算法篇_面试必刷TOP101" loading="lazy" decoding="async"/></div></a></div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[公式编辑器总结]]></title>
        <id>https://tangly1024.com/article/e2a6063e-0359-4170-9371-52045fd4be7d</id>
        <link href="https://tangly1024.com/article/e2a6063e-0359-4170-9371-52045fd4be7d"/>
        <updated>2023-09-05T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-e2a6063e03594170937152045fd4be7d"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-9f567cfd93b54b6d973e9f0fa8b5ba86" data-id="9f567cfd93b54b6d973e9f0fa8b5ba86"><span><div id="9f567cfd93b54b6d973e9f0fa8b5ba86" class="notion-header-anchor"></div><a class="notion-hash-link" href="#9f567cfd93b54b6d973e9f0fa8b5ba86" title="背景"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">背景</span></span></h2><div class="notion-text notion-block-b34255b66b78403080375698f917b929">在表格中的单元格编辑中新增算量公式，用于进行户型图数据的计算。算量公式是其中最核心的功能，它通过公式来对户型图进行各种精准算量。为了提高公式输入体验，就需要实现一个公式编辑器。而且还需要封装为组件，供其他产品线使用。</div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-3df91f15c9014a24a970a7d85a02fa62" data-id="3df91f15c9014a24a970a7d85a02fa62"><span><div id="3df91f15c9014a24a970a7d85a02fa62" class="notion-header-anchor"></div><a class="notion-hash-link" href="#3df91f15c9014a24a970a7d85a02fa62" title="任务"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>任务</b></span></span></h2><div class="notion-text notion-block-d0c7999b619b45bf97681904518ca066">实现一个支持高亮、联想、提示、括号颜色匹配、单元格引用标记和错误提示功能的公式编辑器。</div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-92f4f33a08064bc0bbb2a9b59cb3be5c" data-id="92f4f33a08064bc0bbb2a9b59cb3be5c"><span><div id="92f4f33a08064bc0bbb2a9b59cb3be5c" class="notion-header-anchor"></div><a class="notion-hash-link" href="#92f4f33a08064bc0bbb2a9b59cb3be5c" title="难点"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>难点</b></span></span></h2><div class="notion-text notion-block-3c6306f308a941b7bb8e52458217d090">需要使用富文本，并对公式进行词法解析，语法解析，再把解析结果转换为富文本支持的数据结构来实现功能。</div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-79ad8e116da0457d9c50fef30bb7a411" data-id="79ad8e116da0457d9c50fef30bb7a411"><span><div id="79ad8e116da0457d9c50fef30bb7a411" class="notion-header-anchor"></div><a class="notion-hash-link" href="#79ad8e116da0457d9c50fef30bb7a411" title="过程"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">过程</span></span></h2><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-118c739de16c486eaa441b8ea9950f5a" data-id="118c739de16c486eaa441b8ea9950f5a"><span><div id="118c739de16c486eaa441b8ea9950f5a" class="notion-header-anchor"></div><a class="notion-hash-link" href="#118c739de16c486eaa441b8ea9950f5a" title="实现思路总结"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">实现思路总结</span></span></h3><ol start="1" class="notion-list notion-list-numbered notion-block-0ab507c89d414274a8a61aae384dc74c"><li>输入公式字符串。</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-2c4453a66b1349a79b00da731d42da8e"><li>对字符串进行词法解析，转换为token词法单元组成的AST抽象语法树。</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-e3baff91feb4470d9f8a0300de6895a8"><li>对抽象语法树进行操作，实现功能需求（括号高亮、联想、彩虹括号、单元格引用标识、错误提示）</li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-d421685a95be4bf88866a8bce1f9be81"><li>将AST转成slate的数据结构，进行显示。</li></ol><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-ce6c92726e064231ba98f7f3c802d65b" data-id="ce6c92726e064231ba98f7f3c802d65b"><span><div id="ce6c92726e064231ba98f7f3c802d65b" class="notion-header-anchor"></div><a class="notion-hash-link" href="#ce6c92726e064231ba98f7f3c802d65b" title="富文本技术选型"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">富文本技术选型</span></span></h3><ul class="notion-list notion-list-disc notion-block-2afd0e03344b4e13a8d3a896a786af10"><li>monaco：vscode使用的富文本框架，包大，功能多很多功能用不到，联想的样式很难定制，只支持纯文本，不支持多层dom嵌套，</li></ul><ul class="notion-list notion-list-disc notion-block-d3959d38dc1446a6af30e548d4d7a5cc"><li>wangeditor，包大，渲染层是vue，是基于slate二次封装，很多功能用不到。</li></ul><ul class="notion-list notion-list-disc notion-block-7bd5f5649ec94616a6a830e29f59a5b4"><li>draft，不可变数据结构，不支持多层dom嵌套的节点。</li></ul><ul class="notion-list notion-list-disc notion-block-898fc1bf72d94803bd4dba367733841f"><li>slate，是一个富文本框架，只提供最基础的富文本内核，包括数据结构，选区，基础操作，undo、redo，用ts写的，缺点就是需要进行大量的二次开发。</li></ul><div class="notion-text notion-block-d0b6a2242eca41fa9f2c156362644af3">slate提供了富文本编辑器的核心能力，提供 React 渲染层，支持多层dom嵌套结构，包体积小，用ts写的。</div><div class="notion-text notion-block-8dc54944f6da41179d1ab4e1deb5ceda">但存在的问题是它不是一个开箱即用的框架，例如常用的字体编辑加粗、斜体、下划线、删除线、行内代码、文字颜色、背景色都需要自己重新开发。</div><div class="notion-text notion-block-bed5bc43ce00470981bd9acd837b2099">基于slate提供的中间件能力，在上层实现各种复杂的富文本编辑器。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-486193a3755e466bae0dba58dd88a453" data-id="486193a3755e466bae0dba58dd88a453"><span><div id="486193a3755e466bae0dba58dd88a453" class="notion-header-anchor"></div><a class="notion-hash-link" href="#486193a3755e466bae0dba58dd88a453" title="词法解析器技术选型"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">词法解析器技术选型</span></span></h3><ul class="notion-list notion-list-disc notion-block-7cbec837c43f4d00beb4932a3987f7b5"><li>acorn ：babel使用的词法解析器，但只是针对js解析的，不支持自定义规则解析</li></ul><ul class="notion-list notion-list-disc notion-block-cabd7fc20fa24795b78e71e5261744f6"><li>antlr：一种专门用于做词法解析的工具，但需要学习他专门的语法，学习成本很高，想在项目中使用也很麻烦，每次修改还需要通过命令行把代码转成JS代码。</li></ul><ul class="notion-list notion-list-disc notion-block-563e57204e1d4c5997148118c7be02ad"><li>highlight.js：不支持导出 AST，而且其词法解析能力相对 prism.js 较弱，在多个类型规则同时匹配时，后面的规则会覆盖前面的。</li></ul><ul class="notion-list notion-list-disc notion-block-f4b4c0d9bdb843e3802e35573352ccd8"><li>prism.js：支持导出AST，而且多个类型规则同时匹配，不会被覆盖，会将类型转换为数组，把匹配的类型都放在数组里。</li></ul><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-52d529b9419f4ce9bb8f45f656c07376" data-id="52d529b9419f4ce9bb8f45f656c07376"><span><div id="52d529b9419f4ce9bb8f45f656c07376" class="notion-header-anchor"></div><a class="notion-hash-link" href="#52d529b9419f4ce9bb8f45f656c07376" title="Slate的一些坑"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Slate的一些坑</span></span></h3><ul class="notion-list notion-list-disc notion-block-e75f65aac95a451eba6f980c22c8733f"><li>中文输入，用输入法会把拼音和汉字一起输入，需要通过composition事件来处理。</li></ul><ul class="notion-list notion-list-disc notion-block-82bb50d35a83482e9c65f47551648bad"><li>value不能是空数组中必须有一个空的node，否则会报错。</li></ul><ul class="notion-list notion-list-disc notion-block-cd8b012ca1dd44408d64efc985da68ec"><li>value是默认值，不能外部修改，需要通过插件来暴露一个set方法来修改，set时还要注意重置光标位置，如果光标位置不存在，会直接报错。</li></ul><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-c44bbb1e96b84c98a36f02f603b1b570" data-id="c44bbb1e96b84c98a36f02f603b1b570"><span><div id="c44bbb1e96b84c98a36f02f603b1b570" class="notion-header-anchor"></div><a class="notion-hash-link" href="#c44bbb1e96b84c98a36f02f603b1b570" title="性能优化"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">性能优化</span></span></h3><ul class="notion-list notion-list-disc notion-block-79d64f8da867438caf050452d40fd06e"><li>提前获取联想内容</li></ul><ul class="notion-list notion-list-disc notion-block-c4be6fcc035d447c99b39b785fa59bb6"><li>联想功能进行防抖</li></ul><ul class="notion-list notion-list-disc notion-block-4d80054102a4450f8fb392a604241c98"><li>限制长度</li></ul><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-f980c2457cd342fabfc6918a6f09a866" data-id="f980c2457cd342fabfc6918a6f09a866"><span><div id="f980c2457cd342fabfc6918a6f09a866" class="notion-header-anchor"></div><a class="notion-hash-link" href="#f980c2457cd342fabfc6918a6f09a866" title="单元测试"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">单元测试</span></span></h3><div class="notion-text notion-block-5fc8c2ae6d3940dfa45c929e4ac0d35e">随着后期对不同类型的语法支持的增加，如函数、公式、构件、构件属性、构件属性值、单元格、行、列等，正则表达式的数量也增多，达到了20多个。经常会遇到词法解析错误或冲突的情况。为了解决这个问题，引入了 jest 单元测试框架，并编写了许多测试用例以确保词法解析和功能的正确性。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-25340df1e822420fac971442074a49aa" data-id="25340df1e822420fac971442074a49aa"><span><div id="25340df1e822420fac971442074a49aa" class="notion-header-anchor"></div><a class="notion-hash-link" href="#25340df1e822420fac971442074a49aa" title="难点"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">难点</span></span></h3><ul class="notion-list notion-list-disc notion-block-368c316f8e1c4f03b1697ebeff9449dc"><li>词法解析需要编写复杂的正则表达式，并保证准确性。</li></ul><ul class="notion-list notion-list-disc notion-block-fe9a126e2362471ab6ef2f48033ac417"><li>模块化封装，因为还要给其他业务线提供富文本编辑器、公式编辑器，要进行不同程度的程度封装。</li></ul><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-9f944d0d1a2047e98e55ce483c111b6c" data-id="9f944d0d1a2047e98e55ce483c111b6c"><span><div id="9f944d0d1a2047e98e55ce483c111b6c" class="notion-header-anchor"></div><a class="notion-hash-link" href="#9f944d0d1a2047e98e55ce483c111b6c" title="成果"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">成果</span></span></h2><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-8acfbdf3d10c4e6196ee89377cac6ba3" data-id="8acfbdf3d10c4e6196ee89377cac6ba3"><span><div id="8acfbdf3d10c4e6196ee89377cac6ba3" class="notion-header-anchor"></div><a class="notion-hash-link" href="#8acfbdf3d10c4e6196ee89377cac6ba3" title="工具封装"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">工具封装</span></span></h3><ol start="1" class="notion-list notion-list-numbered notion-block-024993acca324f6fb395ec6294cb5723"><li>slate插件：输入长度限制插件（限制输入长度，需要在所有输入、复制的原子操作中增加一层判断），功能拓展插件（封装一些操作功能，例如光标到最后，重新设置内容（因为slate本身是一个非受控组件），替换文本功能），受控模式插件（提供 setData 方法，通过 diff 实现受控模式），公式插件，选择器插件。</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-ddb0425ce29a40809c338a0f887bcdfd"><li>词法解析规则（正则表达式）：行、列、单元格规则，构件、构件属性、构件属性值规则，函数规则，操作符规则。</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-59103b9704804a438bf9fb16582b3d7e"><li>公式编辑器：支持只读模式，受控模式，支持传入自定义语法解析和联想功能。具备很好的扩展性，满足了产品对算量公式的需求，并具备很好的扩展性，例如括号颜色匹配和错误提示等功能的实现。后期还是还实现了引用单元格高亮等功能。</li></ol><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-522846ace9974600a5b720963ac5c1a0" data-id="522846ace9974600a5b720963ac5c1a0"><span><div id="522846ace9974600a5b720963ac5c1a0" class="notion-header-anchor"></div><a class="notion-hash-link" href="#522846ace9974600a5b720963ac5c1a0" title="文档输出"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">文档输出</span></span></h3><ul class="notion-list notion-list-disc notion-block-0c71d4c3120b483881ecdf0a8c40d0fb"><li>富文本编辑框架选型</li></ul><ul class="notion-list notion-list-disc notion-block-70db47d481784f548f3fb267715333d9"><li>语法解析框架选型</li></ul><ul class="notion-list notion-list-disc notion-block-1bb8d95dbce64adb91e6178fc0d1f956"><li>词法解析api文档</li></ul><ul class="notion-list notion-list-disc notion-block-fffac1b333884d06923b5ac5838fdade"><li>富文本编辑器api文档</li></ul><ul class="notion-list notion-list-disc notion-block-78218f4446d145b2b74bc6d077d7c1f2"><li>slate 富文本 API 的使用和注意事项，</li></ul><ul class="notion-list notion-list-disc notion-block-af8983230e5a4856b4c1251ac2781be1"><li>整个公式编辑器的设计文档。</li></ul><div class="notion-blank notion-block-339afd723629485f98f803a0a4c640f9"> </div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[性能优化]]></title>
        <id>https://tangly1024.com/article/df1ab703-3a0d-43bc-81dd-0ea24b600f49</id>
        <link href="https://tangly1024.com/article/df1ab703-3a0d-43bc-81dd-0ea24b600f49"/>
        <updated>2023-10-15T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-df1ab7033a0d43bc81dd0ea24b600f49"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-8c519f96ea3b40248e7e4e5cbb17ac00" data-id="8c519f96ea3b40248e7e4e5cbb17ac00"><span><div id="8c519f96ea3b40248e7e4e5cbb17ac00" class="notion-header-anchor"></div><a class="notion-hash-link" href="#8c519f96ea3b40248e7e4e5cbb17ac00" title="性能问题排查"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">性能问题排查</span></span></h2><ol start="1" class="notion-list notion-list-numbered notion-block-6ab36a26eaff41329d92c29958ac6ccc"><li>数据埋点上报</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-73387614a29643abaa2af78af24a780f"><li>使用控制台的NetWork、Performance等工具</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-a6aa2c0d5c10438a81acfa75bca90076"><li>webpack-bundle-analyzer插件分析打包产物</li></ol><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-c8c2ab9c9e8e4bc78ae938ed9e1c7382" data-id="c8c2ab9c9e8e4bc78ae938ed9e1c7382"><span><div id="c8c2ab9c9e8e4bc78ae938ed9e1c7382" class="notion-header-anchor"></div><a class="notion-hash-link" href="#c8c2ab9c9e8e4bc78ae938ed9e1c7382" title="HTTP"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">HTTP</span></span></h2><ol start="1" class="notion-list notion-list-numbered notion-block-02455e36f7094ba190a41d98a226c760"><li>gzip压缩</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-c8f99b854982402f9ab08cdc29509800"><li>强缓存、协商缓存</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-705a96238ddc4979946a91268e72ce09"><li>升级HTTP版本</li></ol><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-a322e182a23947e99bcfdedca6fe45b7" data-id="a322e182a23947e99bcfdedca6fe45b7"><span><div id="a322e182a23947e99bcfdedca6fe45b7" class="notion-header-anchor"></div><a class="notion-hash-link" href="#a322e182a23947e99bcfdedca6fe45b7" title="图片"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">图片</span></span></h2><ol start="1" class="notion-list notion-list-numbered notion-block-404fbd29fb7143aa801887ad62c1fbb7"><li>图片压缩</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-35fe50c4e4804d88adb5bc025239336f"><li>图片懒加载</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-c430728d23d442a081aeae246325e258"><li>雪碧图、使用字体图标、svg</li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-2f4cd57fee7c40009b2bad5a037a8128"><li>CDN</li></ol><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-787df4605fce448f84a77749c9b6bc9c" data-id="787df4605fce448f84a77749c9b6bc9c"><span><div id="787df4605fce448f84a77749c9b6bc9c" class="notion-header-anchor"></div><a class="notion-hash-link" href="#787df4605fce448f84a77749c9b6bc9c" title="Webpack"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Webpack</span></span></h2><ol start="1" class="notion-list notion-list-numbered notion-block-5689f8060f064f0697db131e076b76cc"><li>多进程打包</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-59eea92874af479f81885440d68265b0"><li>分包</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-9e0890ab38bb4b84b993afe1aad1cb2f"><li>代码压缩</li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-16c9b105c11c4ebdb82d208b4c7eb906"><li>CDN</li></ol><ol start="5" class="notion-list notion-list-numbered notion-block-716ac81c3cef4cf7a8fb06968f384a40"><li>tree-sharking</li></ol><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-4b68a57c73de4475b9f3e1378ff48cab" data-id="4b68a57c73de4475b9f3e1378ff48cab"><span><div id="4b68a57c73de4475b9f3e1378ff48cab" class="notion-header-anchor"></div><a class="notion-hash-link" href="#4b68a57c73de4475b9f3e1378ff48cab" title="html"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">html</span></span></h2><ul class="notion-list notion-list-disc notion-block-33414f8683dd4f458c375c4427f5d509"><li><b>css放在head中</b>。由于同时具有 DOM 和 CSSOM 才能构建渲染树，所以HTML 和 CSS 都是阻塞渲染的资源，所以尽量精简CSS也是优化方式之一。</li></ul><ul class="notion-list notion-list-disc notion-block-f751dc868a1440c3865082d5f28ae087"><li><b>js放在body底部</b>，减少白屏时间。因为js会阻止浏览器解析。使用defer、async</li></ul><ul class="notion-list notion-list-disc notion-block-418204b607664e5f943254a98094030e"><li><b>减少回流和重绘制</b>，比如不要一条一条修改DOM样式、使用documentFragment操作DOM等。</li></ul><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-3528a3afd1f34c7e90732aace23ff413" href="https://juejin.cn/post/6952499015879507982"><div><div class="notion-bookmark-title">深入理解DocumentFragment -文档片段 - 掘金</div><div class="notion-bookmark-description">什么是文档片段？（MDN解释：）DocumentFragment，文档片段接口，一个没有父对象的最小文档对象。它被作为一个轻量版的 Document 使用，就像标准的document一样，存储由节点（</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/static/favicons/apple-touch-icon.png?t=3528a3af-d1f3-4c7e-9073-2aace23ff413" alt="深入理解DocumentFragment -文档片段 - 掘金" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://juejin.cn/post/6952499015879507982</div></div></div></a></div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-693f90158b2141cfa9ae7fb587a2c742" data-id="693f90158b2141cfa9ae7fb587a2c742"><span><div id="693f90158b2141cfa9ae7fb587a2c742" class="notion-header-anchor"></div><a class="notion-hash-link" href="#693f90158b2141cfa9ae7fb587a2c742" title="代码层面"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">代码层面</span></span></h2><ul class="notion-list notion-list-disc notion-block-df9d9df484c949738be42ddeaba32396"><li>按需加载，逻辑后移，优先保证首屏内容渲染</li></ul><ul class="notion-list notion-list-disc notion-block-f9ca87d50ddd49739f4c7fae2bdd9dfb"><li>预加载</li></ul><ul class="notion-list notion-list-disc notion-block-e6f7d4776e7a4114addc1d64ec9f3ee8"><li>复杂计算使用web worker</li></ul><ul class="notion-list notion-list-disc notion-block-db2f1b1215334d2682966a0e48b373a3"><li>数据缓存，对实时性不高的接口进行缓存，缓存复杂或常用的计算结果</li></ul><ul class="notion-list notion-list-disc notion-block-e7e583e6650c4b15b28d9a5087928241"><li>骨架屏</li></ul><ul class="notion-list notion-list-disc notion-block-3ba505e4546c40c18a2119dd3eeda09b"><li>虚拟滚动</li></ul><ul class="notion-list notion-list-disc notion-block-3906d884e38c4fe6b6b63b1a490ba9d8"><li>任务切片</li></ul><ul class="notion-list notion-list-disc notion-block-f7c2ad6c6afa4c028dba80c9f5b4024c"><li>及时消除对象引用，清除定时器，清除事件监听器；</li></ul><ul class="notion-list notion-list-disc notion-block-b5111d99a5134cddbc802f341f6bbe3d"><li>减少<code class="notion-inline-code">dom</code> 操作，利用documentFragment，尽可能合并dom操作。</li></ul><ul class="notion-list notion-list-disc notion-block-508875a13a274220901e80a9e915fa1f"><li>防抖节流</li></ul><ul class="notion-list notion-list-disc notion-block-569843ce1ac7472980dd77b4e9dc03a2"><li>组件库按需加载</li></ul><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-c03324d15f3c4cf8bb508d3e1ec443f0" data-id="c03324d15f3c4cf8bb508d3e1ec443f0"><span><div id="c03324d15f3c4cf8bb508d3e1ec443f0" class="notion-header-anchor"></div><a class="notion-hash-link" href="#c03324d15f3c4cf8bb508d3e1ec443f0" title="第一次页面加载"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>第一次页面加载</b></span></span></h3><div class="notion-text notion-block-83f0ea4104d64015b49740c5d632204f">减少白屏的效果和时间</div><ul class="notion-list notion-list-disc notion-block-52780ca3c4fc4fbebba9fd66f2b317cc"><li>增加LOADING状态</li></ul><ul class="notion-list notion-list-disc notion-block-c7509b96a49248cd8ae5ec25a9866295"><li>骨架屏</li></ul><ul class="notion-list notion-list-disc notion-block-8a7b136d37fa4a958f23ae20665ef363"><li>图片延迟加载</li></ul><ul class="notion-list notion-list-disc notion-block-2a90a95adb6f4ea28c635cec22b74b2a"><li>SSR</li></ul><ul class="notion-list notion-list-disc notion-block-a3462d03a8c948dd8567e03d216e9f20"><li>CDN</li></ul><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-39291bd49ed441ddb3bafb7754780091" data-id="39291bd49ed441ddb3bafb7754780091"><span><div id="39291bd49ed441ddb3bafb7754780091" class="notion-header-anchor"></div><a class="notion-hash-link" href="#39291bd49ed441ddb3bafb7754780091" title="首屏速度提升"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">首屏速度提升</span></span></h3><ul class="notion-list notion-list-disc notion-block-a14afde302a8477f84579f8fca158a02"><li>代码压缩，减少打包的静态资源体积(Terser plugin/MiniCssExtratplugin)</li></ul><ul class="notion-list notion-list-disc notion-block-73c6322342a647ab96cdc18bddcbf0c7"><li>路由懒加载，首屏就只会请求第一个路由的相关资源</li></ul><ul class="notion-list notion-list-disc notion-block-69a981f8696344c4971e13f763fbf74b"><li>使用 cdn加速第三方库。</li></ul><ul class="notion-list notion-list-disc notion-block-028a705736ad485cb11c182707478930"><li>ssr 服务端渲染，由服务器直接返回拼接好的html页面</li></ul><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-99c81a693e3b4514ab1633da84cf98d5" data-id="99c81a693e3b4514ab1633da84cf98d5"><span><div id="99c81a693e3b4514ab1633da84cf98d5" class="notion-header-anchor"></div><a class="notion-hash-link" href="#99c81a693e3b4514ab1633da84cf98d5" title="减少白屏时间"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">减少白屏时间</span></span></h2><ol start="1" class="notion-list notion-list-numbered notion-block-d90f2ff46e244d81ab3442ee9e2a210f"><li>前置条件</li><ol class="notion-list notion-list-numbered notion-block-d90f2ff46e244d81ab3442ee9e2a210f"><ul class="notion-list notion-list-disc notion-block-e4a33d17146e43a18da4cdb562f63ea3"><li>性能监控指标</li></ul></ol></ol><ol start="2" class="notion-list notion-list-numbered notion-block-3b24c4b3741b48609654952c261d2bd1"><li>APP 内点击打开页面</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-51c8c7397afc4d28a57129b2f26715c1"><li>DNS 解析</li><ol class="notion-list notion-list-numbered notion-block-51c8c7397afc4d28a57129b2f26715c1"><ul class="notion-list notion-list-disc notion-block-c3a3b99d716a4dd1b26e3e0befae9e22"><li>预解析</li></ul><ul class="notion-list notion-list-disc notion-block-077671871290494c806ed43884aff3de"><li>域名收敛</li></ul></ol></ol><ol start="4" class="notion-list notion-list-numbered notion-block-3da7fb0e8f7f4a5e978e90309b14c95e"><li>TCP 连接</li><ol class="notion-list notion-list-numbered notion-block-3da7fb0e8f7f4a5e978e90309b14c95e"><ul class="notion-list notion-list-disc notion-block-f43d89d76548454181d64e0aa9f6a790"><li>预连接</li></ul></ol></ol><ol start="5" class="notion-list notion-list-numbered notion-block-05a87421e95d426ab53c50557cb2be54"><li>发送并响应请求</li><ol class="notion-list notion-list-numbered notion-block-05a87421e95d426ab53c50557cb2be54"><ul class="notion-list notion-list-disc notion-block-ad82b19145cd4380a9833d8d87527773"><li>HTTP/2</li></ul></ol></ol><ol start="6" class="notion-list notion-list-numbered notion-block-395659a6f5834b649df4284bb9f07b0d"><li>浏览器解析页面</li><ol class="notion-list notion-list-numbered notion-block-395659a6f5834b649df4284bb9f07b0d"><ul class="notion-list notion-list-disc notion-block-1af55ca507034db5a2dfa7932abfbe52"><li>服务端渲染</li></ul></ol></ol><ol start="7" class="notion-list notion-list-numbered notion-block-55cc00c15fa94a979a934feea9b57388"><li>加载资源并渲染页面</li><ol class="notion-list notion-list-numbered notion-block-55cc00c15fa94a979a934feea9b57388"><ul class="notion-list notion-list-disc notion-block-eba7627d6a1841deb7ea94374e354488"><li>骨架屏</li></ul><ul class="notion-list notion-list-disc notion-block-6404ba2e407e4f9e97dbb2e54a109171"><li>资源优化</li></ul><ul class="notion-list notion-list-disc notion-block-2aeaadb66f104baebee7e6cfae6d7845"><li>资源预加载</li></ul></ol></ol><ol start="8" class="notion-list notion-list-numbered notion-block-1b0341bfca6a4b75bab138f2af767fff"><li>请求接口，获取数据并渲染</li><ol class="notion-list notion-list-numbered notion-block-1b0341bfca6a4b75bab138f2af767fff"><ul class="notion-list notion-list-disc notion-block-8cc3487ce5014f03ad45518bc660ca6c"><li>接口预加载</li></ul><ul class="notion-list notion-list-disc notion-block-b236974b5b9c483d98518aabfea607c5"><li>接口合并</li></ul></ol></ol><div class="notion-blank notion-block-bb8cb5ad5074448eba8a3303dc747e35"> </div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-68e4b432a12f429f993b8d2da5080377" href="https://febook.hzfe.org/awesome-interview/book3/topic-white-screen-optimization"><div><div class="notion-bookmark-title">如何减少白屏的时间 | HZFE - 剑指前端 Offer</div><div class="notion-bookmark-description">回答关键点</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://febook.hzfe.org/awesome-interview/img/favicon.ico?t=68e4b432-a12f-429f-993b-8d2da5080377" alt="如何减少白屏的时间 | HZFE - 剑指前端 Offer" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://febook.hzfe.org/awesome-interview/book3/topic-white-screen-optimization</div></div></div></a></div><div class="notion-blank notion-block-8404fd3c7fe344ca9bc97f05aaeb9052"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-5b64227cb208411ba078354a2e95617f" data-id="5b64227cb208411ba078354a2e95617f"><span><div id="5b64227cb208411ba078354a2e95617f" class="notion-header-anchor"></div><a class="notion-hash-link" href="#5b64227cb208411ba078354a2e95617f" title="大量图片加载优化策略"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>大量图片加载优化策略</b></span></span></h2><ul class="notion-list notion-list-disc notion-block-cdc30ba7536e4366baaf7e78fd603da0"><li>可以考虑上传到图片服务器</li></ul><ul class="notion-list notion-list-disc notion-block-92e75c2616ad4f1ab0e837d6e408dcdb"><li>图片压缩再进行上传</li></ul><ul class="notion-list notion-list-disc notion-block-ddfaa07e38eb4d0daf5909b309054ba2"><li>使用懒加载（滚动加载，当滚动到可视区时再进行加载）</li></ul><ul class="notion-list notion-list-disc notion-block-668bfb2155054e9ab8b70d2586e6ab4e"><li>使用预加载（先将部分图片下载到本地，使用时进行替换，设定一个阀值，后面判断数据中剩余的图片阀值再进行下载）</li></ul><ul class="notion-list notion-list-disc notion-block-006fdcc3ed0741bc980f1322d9b24dce"><li>在<code class="notion-inline-code">webpack</code> 配置图片优化策略：小于指定大小使用<code class="notion-inline-code">base64</code></li></ul><ul class="notion-list notion-list-disc notion-block-241b04e21dc049068d6850e9d309252d"><li>如果是大量的图标，可以使用<code class="notion-inline-code">iconfont</code></li></ul><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-f730b87d5db246f38df4f8c742419653" data-id="f730b87d5db246f38df4f8c742419653"><span><div id="f730b87d5db246f38df4f8c742419653" class="notion-header-anchor"></div><a class="notion-hash-link" href="#f730b87d5db246f38df4f8c742419653" title="扩展"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">扩展</span></span></h3><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-0d488d25ffb34b49895905f83f6003e8" href="https://alienzhou.com/projects/fe-performance-journey/#旅途的行程路线"><div><div class="notion-bookmark-title">🚵 前端性能优化之旅 | 前端性能优化</div><div class="notion-bookmark-description">从用户发起访问开始到离开网站应用结束，完整地介绍其间前端性能优化的关注点与技术手段，帮助大家体系化得了解与学习前端性能优化相关知识</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://raw.githubusercontent.com/alienzhou/alienzhou.github.io/master/img/fe-performance-journey/favicon.png?t=0d488d25-ffb3-4b49-8959-05f83f6003e8" alt="🚵 前端性能优化之旅 | 前端性能优化" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://alienzhou.com/projects/fe-performance-journey/#旅途的行程路线</div></div></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-9453a05ae6de44ad82f564fa3afbb363" href="https://segmentfault.com/a/1190000041753539#item-3"><div><div class="notion-bookmark-title">segmentfault.com</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-text">https://segmentfault.com/a/1190000041753539#item-3</div></div></div></a></div><div class="notion-text notion-block-418fa71aa3f8458cbce46c28caa66439"><a target="_blank" rel="noopener noreferrer" href="https://github.com/brickspert/blog/issues/36" class="notion-external notion-external-mention"><div class="notion-external-image"><svg viewBox="0 0 260 260"><g><path d="M128.00106,0 C57.3172926,0 0,57.3066942 0,128.00106 C0,184.555281 36.6761997,232.535542 87.534937,249.460899 C93.9320223,250.645779 96.280588,246.684165 96.280588,243.303333 C96.280588,240.251045 96.1618878,230.167899 96.106777,219.472176 C60.4967585,227.215235 52.9826207,204.369712 52.9826207,204.369712 C47.1599584,189.574598 38.770408,185.640538 38.770408,185.640538 C27.1568785,177.696113 39.6458206,177.859325 39.6458206,177.859325 C52.4993419,178.762293 59.267365,191.04987 59.267365,191.04987 C70.6837675,210.618423 89.2115753,204.961093 96.5158685,201.690482 C97.6647155,193.417512 100.981959,187.77078 104.642583,184.574357 C76.211799,181.33766 46.324819,170.362144 46.324819,121.315702 C46.324819,107.340889 51.3250588,95.9223682 59.5132437,86.9583937 C58.1842268,83.7344152 53.8029229,70.715562 60.7532354,53.0843636 C60.7532354,53.0843636 71.5019501,49.6441813 95.9626412,66.2049595 C106.172967,63.368876 117.123047,61.9465949 128.00106,61.8978432 C138.879073,61.9465949 149.837632,63.368876 160.067033,66.2049595 C184.49805,49.6441813 195.231926,53.0843636 195.231926,53.0843636 C202.199197,70.715562 197.815773,83.7344152 196.486756,86.9583937 C204.694018,95.9223682 209.660343,107.340889 209.660343,121.315702 C209.660343,170.478725 179.716133,181.303747 151.213281,184.472614 C155.80443,188.444828 159.895342,196.234518 159.895342,208.176593 C159.895342,225.303317 159.746968,239.087361 159.746968,243.303333 C159.746968,246.709601 162.05102,250.70089 168.53925,249.443941 C219.370432,232.499507 256,184.536204 256,128.00106 C256,57.3066942 198.691187,0 128.00106,0 Z M47.9405593,182.340212 C47.6586465,182.976105 46.6581745,183.166873 45.7467277,182.730227 C44.8183235,182.312656 44.2968914,181.445722 44.5978808,180.80771 C44.8734344,180.152739 45.876026,179.97045 46.8023103,180.409216 C47.7328342,180.826786 48.2627451,181.702199 47.9405593,182.340212 Z M54.2367892,187.958254 C53.6263318,188.524199 52.4329723,188.261363 51.6232682,187.366874 C50.7860088,186.474504 50.6291553,185.281144 51.2480912,184.70672 C51.8776254,184.140775 53.0349512,184.405731 53.8743302,185.298101 C54.7115892,186.201069 54.8748019,187.38595 54.2367892,187.958254 Z M58.5562413,195.146347 C57.7719732,195.691096 56.4895886,195.180261 55.6968417,194.042013 C54.9125733,192.903764 54.9125733,191.538713 55.713799,190.991845 C56.5086651,190.444977 57.7719732,190.936735 58.5753181,192.066505 C59.3574669,193.22383 59.3574669,194.58888 58.5562413,195.146347 Z M65.8613592,203.471174 C65.1597571,204.244846 63.6654083,204.03712 62.5716717,202.981538 C61.4524999,201.94927 61.1409122,200.484596 61.8446341,199.710926 C62.5547146,198.935137 64.0575422,199.15346 65.1597571,200.200564 C66.2704506,201.230712 66.6095936,202.705984 65.8613592,203.471174 Z M75.3025151,206.281542 C74.9930474,207.284134 73.553809,207.739857 72.1039724,207.313809 C70.6562556,206.875043 69.7087748,205.700761 70.0012857,204.687571 C70.302275,203.678621 71.7478721,203.20382 73.2083069,203.659543 C74.6539041,204.09619 75.6035048,205.261994 75.3025151,206.281542 Z M86.046947,207.473627 C86.0829806,208.529209 84.8535871,209.404622 83.3316829,209.4237 C81.8013,209.457614 80.563428,208.603398 80.5464708,207.564772 C80.5464708,206.498591 81.7483088,205.631657 83.2786917,205.606221 C84.8005962,205.576546 86.046947,206.424403 86.046947,207.473627 Z M96.6021471,207.069023 C96.7844366,208.099171 95.7267341,209.156872 94.215428,209.438785 C92.7295577,209.710099 91.3539086,209.074206 91.1652603,208.052538 C90.9808515,206.996955 92.0576306,205.939253 93.5413813,205.66582 C95.054807,205.402984 96.4092596,206.021919 96.6021471,207.069023 Z" fill="#161614"></path></g></svg></div><div class="notion-external-description"><div class="notion-external-title">React 项目性能分析及优化</div><div class="notion-external-subtitle"><span>Updated <!-- -->Mar 14, 2022</span></div></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-77c6eee6d18f432aa48b6eacf4d3a8aa" href="https://www.kancloud.cn/hanxuming/interview/3150904"><div><div class="notion-bookmark-title">前端性能优化常用的方法有哪些? · 前端押题宝典 · 看云</div><div class="notion-bookmark-description">《前端押题宝典》是一本聚焦于前端技术面试的书籍。作者经过阅读千余篇精品前端面试题文章，并联合字节跳动、阿里巴巴等大厂内的前端大佬，收录了涵盖Vue、React、JavaScript、TypeScript等前端各个领域常考的知识点和面试题目。助力前端工程师更加快捷、全面的一站式准备前端面试。</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://www.kancloud.cn/favicon.ico?t=77c6eee6-d18f-432a-a48b-6eacf4d3a8aa" alt="前端性能优化常用的方法有哪些? · 前端押题宝典 · 看云" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://www.kancloud.cn/hanxuming/interview/3150904</div></div></div></a></div><div class="notion-blank notion-block-7eba7c2d38444c2280febec95021f382"> </div></main></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[webpack、vite]]></title>
        <id>https://tangly1024.com/article/ecd891de-2641-45fb-a21e-77d79dbe9ae9</id>
        <link href="https://tangly1024.com/article/ecd891de-2641-45fb-a21e-77d79dbe9ae9"/>
        <updated>2023-10-15T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<div id="notion-article" class="mx-auto overflow-hidden "><main class="notion light-mode notion-page notion-block-ecd891de264145fba21e77d79dbe9ae9"><div class="notion-viewport"></div><div class="notion-collection-page-properties"></div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-95d597e61450482494fe96ea9b6b914f" data-id="95d597e61450482494fe96ea9b6b914f"><span><div id="95d597e61450482494fe96ea9b6b914f" class="notion-header-anchor"></div><a class="notion-hash-link" href="#95d597e61450482494fe96ea9b6b914f" title="构建流程"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">构建流程</span></span></h2><div class="notion-text notion-block-a304dc07b15746818fc7ec3665a40e57">Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</div><ul class="notion-list notion-list-disc notion-block-aa064b32e66d4b3394de5d4cf29df248"><li><code class="notion-inline-code">初始化参数</code>：读取<code class="notion-inline-code">webpack</code>的配置参数。</li></ul><ul class="notion-list notion-list-disc notion-block-5e064a096e9d403a8753996b694bbb03"><li><code class="notion-inline-code">开始编译</code>：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译</li></ul><ul class="notion-list notion-list-disc notion-block-0accd40480fb48579a1641d0f9f4247b"><li><code class="notion-inline-code">确定入口</code>：根据配置中的 entry 找出所有的入口文件</li></ul><ul class="notion-list notion-list-disc notion-block-d9da5e8a2dea4ab0ae7801e45081d82b"><li><code class="notion-inline-code">解析模块</code>：从入口文件（<code class="notion-inline-code">entry</code>）开始解析，并且找到其导入的依赖模块，递归遍历分析，形成依赖关系树；</li></ul><ul class="notion-list notion-list-disc notion-block-2c63481c0b1d4702a7c114917f388def"><li><code class="notion-inline-code">编译模块</code>：对不同文件类型的依赖模块文件使用对应的<code class="notion-inline-code">Loader</code>进行编译，最终转为<code class="notion-inline-code">Javascript</code>文件；</li></ul><ul class="notion-list notion-list-disc notion-block-58e5743218f54ca78c98704ee22be83e"><li><code class="notion-inline-code">输出资源</code>：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li></ul><ul class="notion-list notion-list-disc notion-block-ce762476eb0f4bff8c1705fd6810db58"><li><code class="notion-inline-code">输出完成</code>：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ul><div class="notion-text notion-block-846dd032bae545c8b0e8ad0ba0a82bd8">在以上过程中，<code class="notion-inline-code">Webpack</code> 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</div><div class="notion-text notion-block-a681e02bee664f998b3f5e18c49e390a">简单说</div><ul class="notion-list notion-list-disc notion-block-bc87f0fef52d46e497acc7969de3e5e6"><li>初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler</li></ul><ul class="notion-list notion-list-disc notion-block-8ad1d7afd1ac4d6480487145bf1d4fc9"><li>编译：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行编译处理</li></ul><ul class="notion-list notion-list-disc notion-block-9f73bb3fbb0543829be2657c07a6ad67"><li>输出：将编译后的 Module 组合成 Chunk，将 Chunk 转换成文件，输出到文件系统中</li></ul><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-b91a5086d28c462ca205e918f10dad33" href="http://febook.hzfe.org/awesome-interview/book1/engineer-webpack-workflow"><div><div class="notion-bookmark-title">webpack 工作流程 | HZFE - 剑指前端 Offer</div><div class="notion-bookmark-description">本篇内容和配置基于 webpack v5.52.1 讲解</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="http://febook.hzfe.org/awesome-interview/img/favicon.ico?t=b91a5086-d28c-462c-a205-e918f10dad33" alt="webpack 工作流程 | HZFE - 剑指前端 Offer" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">http://febook.hzfe.org/awesome-interview/book1/engineer-webpack-workflow</div></div></div></a></div><div class="notion-blank notion-block-36c689c56220471eb38487c345349091"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-9702ad152e9546f295a4fd165e1bc958" data-id="9702ad152e9546f295a4fd165e1bc958"><span><div id="9702ad152e9546f295a4fd165e1bc958" class="notion-header-anchor"></div><a class="notion-hash-link" href="#9702ad152e9546f295a4fd165e1bc958" title="Loader"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Loader</span></span></h2><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-b93d55c31fc84b9fb4981b85e4d1ed02" data-id="b93d55c31fc84b9fb4981b85e4d1ed02"><span><div id="b93d55c31fc84b9fb4981b85e4d1ed02" class="notion-header-anchor"></div><a class="notion-hash-link" href="#b93d55c31fc84b9fb4981b85e4d1ed02" title="编写思路"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">编写思路</span></span></h3><div class="notion-text notion-block-7afe7f5733384bdcb398b1fca74a3ddb">Loader 支持链式调用，所以开发上需要严格遵循“单一职责”，每个 Loader 只负责自己需要负责的事情。</div><div class="notion-text notion-block-6a065471f7494b12ae7bd56c89b9ecb3"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.webpackjs.com%2Fapi%2Floaders%2F">Loader的API</a> </div><ul class="notion-list notion-list-disc notion-block-d523b30dac1a4ca293b7473a6adcc2a0"><li>Loader 运行在 Node.js 中，我们可以调用任意 Node.js 自带的 API 或者安装第三方模块进行调用</li></ul><ul class="notion-list notion-list-disc notion-block-9df00842e2ee4c18adeae4922d8ac72d"><li>Webpack 传给 Loader 的原内容都是 UTF-8 格式编码的字符串，当某些场景下 Loader 处理二进制文件时，需要通过 exports.raw = true 告诉 Webpack 该 Loader 是否需要二进制数据</li></ul><ul class="notion-list notion-list-disc notion-block-92ff44dc496a4b0d9aa07f7a916afbf4"><li>尽可能的异步化 Loader，如果计算量很小，同步也可以</li></ul><ul class="notion-list notion-list-disc notion-block-bb8ae8bb5098488f8aa842d430ba75bc"><li>Loader 是无状态的，我们不应该在 Loader 中保留状态</li></ul><ul class="notion-list notion-list-disc notion-block-c4e0c92a6d9a40e5ad03eeb05b926fd1"><li>使用 loader-utils 和 schema-utils 为我们提供的实用工具</li></ul><ul class="notion-list notion-list-disc notion-block-7e1b48eb7068487391439fdb22c3d952"><li>加载本地 Loader 方法</li><ul class="notion-list notion-list-disc notion-block-7e1b48eb7068487391439fdb22c3d952"><li>Npm link</li><li>ResolveLoader</li></ul></ul><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-10a5335f5d3d461980ce66db12cf8d99" data-id="10a5335f5d3d461980ce66db12cf8d99"><span><div id="10a5335f5d3d461980ce66db12cf8d99" class="notion-header-anchor"></div><a class="notion-hash-link" href="#10a5335f5d3d461980ce66db12cf8d99" title="常用的Loader"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">常用的Loader</span></span></h3><ul class="notion-list notion-list-disc notion-block-38d118956213438087bbbf09355121c2"><li><code class="notion-inline-code">source-map-loader</code>：加载额外的 Source Map 文件，以方便断点调试</li></ul><ul class="notion-list notion-list-disc notion-block-c289175c876d4957af2d7f869cec1754"><li><code class="notion-inline-code">babel-loader</code>：把 ES6 转换成 ES5</li></ul><ul class="notion-list notion-list-disc notion-block-4ff90946de6243d59179da04412d9718"><li><code class="notion-inline-code">ts-loader</code>: 将 TypeScript 转换成 JavaScript</li></ul><ul class="notion-list notion-list-disc notion-block-fffb163656294aca8a9c37a6bd53f225"><li><code class="notion-inline-code">awesome-typescript-loader</code>：将 TypeScript 转换成 JavaScript，性能优于 ts-loader</li></ul><ul class="notion-list notion-list-disc notion-block-fcabf5065d874d509e1713b2789f6ec7"><li><code class="notion-inline-code">sass-loader</code>：将SCSS/SASS代码转换成CSS</li></ul><ul class="notion-list notion-list-disc notion-block-155c0fb58be743b2bf166dcb567403a9"><li><code class="notion-inline-code">css-loader</code>：加载 CSS，支持模块化、压缩、文件导入等特性</li></ul><ul class="notion-list notion-list-disc notion-block-9d6b2029ac15442c97cc306690800312"><li><code class="notion-inline-code">style-loader</code>：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS</li></ul><ul class="notion-list notion-list-disc notion-block-0f1d154a72744e61b79c48c410038b8e"><li><code class="notion-inline-code">postcss-loader</code>：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀</li></ul><ul class="notion-list notion-list-disc notion-block-22c2ce6b5ea140b5afeb8fd9a3e8e8e3"><li><code class="notion-inline-code">eslint-loader</code>：通过 ESLint 检查 JavaScript 代码</li></ul><ul class="notion-list notion-list-disc notion-block-1bc577d429414a719d94a07d5ad6b890"><li><code class="notion-inline-code">tslint-loader</code>：通过 TSLint检查 TypeScript 代码</li></ul><ul class="notion-list notion-list-disc notion-block-c04e78a9496a430db1861940d62d6da3"><li><code class="notion-inline-code">mocha-loader</code>：加载 Mocha 测试用例的代码</li></ul><ul class="notion-list notion-list-disc notion-block-ff49762de5184027913734473a7667e0"><li><code class="notion-inline-code">vue-loader</code>：加载 Vue.js 单文件组件</li></ul><ul class="notion-list notion-list-disc notion-block-e6548f92ef014627b2566b54054b2c84"><li><code class="notion-inline-code">cache-loader</code>: 可以在一些性能开销较大的 Loader 之前添加，目的是将结果缓存到磁盘里</li></ul><div class="notion-blank notion-block-7d66ec08144e4c569115d65d95f42378"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-fd73113ffa4d42758c48d64061317c97" data-id="fd73113ffa4d42758c48d64061317c97"><span><div id="fd73113ffa4d42758c48d64061317c97" class="notion-header-anchor"></div><a class="notion-hash-link" href="#fd73113ffa4d42758c48d64061317c97" title="Plugin"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Plugin</span></span></h2><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-583a20a1c12943a8a32c920398130ce5" data-id="583a20a1c12943a8a32c920398130ce5"><span><div id="583a20a1c12943a8a32c920398130ce5" class="notion-header-anchor"></div><a class="notion-hash-link" href="#583a20a1c12943a8a32c920398130ce5" title="原理"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">原理</span></span></h3><div class="notion-text notion-block-7d6a8a851ee54f7599f832af928593c2"><code class="notion-inline-code">webpack</code>基于发布订阅模式，在运行的生命周期中会广播出许多事件，插件通过监听这些事件，就可以在特定的阶段执行自己的插件任务，从而实现自己想要的功能。Webpack 的 Tapable 事件流机制保证了插件的有序性，使得整个系统扩展性良好。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-8205f22aca1449bca78c36edab84382e" data-id="8205f22aca1449bca78c36edab84382e"><span><div id="8205f22aca1449bca78c36edab84382e" class="notion-header-anchor"></div><a class="notion-hash-link" href="#8205f22aca1449bca78c36edab84382e" title="常用的Plugin"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">常用的Plugin</span></span></h3><ul class="notion-list notion-list-disc notion-block-ff9d2098b83a48898c87b29c296cd3d4"><li><code class="notion-inline-code">otModuleReplacementPlugin</code> ：模块热替换</li></ul><ul class="notion-list notion-list-disc notion-block-13f8214b07704e55bef34e053ce43e95"><li><code class="notion-inline-code">define-plugin</code>：定义环境变量 (Webpack4 之后指定 mode 会自动配置)</li></ul><ul class="notion-list notion-list-disc notion-block-b130d9681f0d4d9c99e9fc06d517b0c7"><li><code class="notion-inline-code">ignore-plugin</code>：忽略部分文件</li></ul><ul class="notion-list notion-list-disc notion-block-09f382f8fafe4cae98e0212cda49986d"><li><code class="notion-inline-code">html-webpack-plugin</code>：简化 HTML 文件创建 (依赖于 html-loader)</li></ul><ul class="notion-list notion-list-disc notion-block-3b5febed53fb47c386a91467dcaceb92"><li><code class="notion-inline-code">web-webpack-plugin</code>：可方便地为单页应用输出 HTML，比 html-webpack-plugin 好用</li></ul><ul class="notion-list notion-list-disc notion-block-dc218ac12f6d4ffa8a322f2cb9596eeb"><li><code class="notion-inline-code">terser-webpack-plugin</code>: 支持压缩 ES6 (Webpack4)</li></ul><ul class="notion-list notion-list-disc notion-block-73dd5f58aeb547018a9fc7e5603f7939"><li><code class="notion-inline-code">webpack-parallel-uglify-plugin</code>: 多进程执行代码压缩，提升构建速度</li></ul><ul class="notion-list notion-list-disc notion-block-c44b7f62d32345b39330dd46efb0e59b"><li><code class="notion-inline-code">mini-css-extract-plugin</code>: 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代extract-text-webpack-plugin)</li></ul><ul class="notion-list notion-list-disc notion-block-9973254e63644cd3b38eab4c17a3ce3f"><li><code class="notion-inline-code">serviceworker-webpack-plugin</code>：为网页应用增加离线缓存功能</li></ul><ul class="notion-list notion-list-disc notion-block-f6637e74a538448695805e1c77252117"><li><code class="notion-inline-code">clean-webpack-plugin</code>: 目录清理</li></ul><ul class="notion-list notion-list-disc notion-block-8fc3771c18314c1e9fd8969009c40b9a"><li><code class="notion-inline-code">ModuleConcatenationPlugin</code>: 开启 Scope Hoisting</li></ul><ul class="notion-list notion-list-disc notion-block-8c27ac4416e14050bf2067bb8b266f89"><li><code class="notion-inline-code">speed-measure-webpack-plugin</code>: 可以看到每个 Loader 和 Plugin 执行耗时 (整个打包耗时、每个 Plugin 和 Loader 耗时)</li></ul><ul class="notion-list notion-list-disc notion-block-04f1fb7a705242d4815dae9289bb1573"><li><code class="notion-inline-code">webpack-bundle-analyzer</code>: 可视化 Webpack 输出文件的体积 (业务组件、依赖第三方模块)</li></ul><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-c61dc4d340ff46fa823d64806db74462" data-id="c61dc4d340ff46fa823d64806db74462"><span><div id="c61dc4d340ff46fa823d64806db74462" class="notion-header-anchor"></div><a class="notion-hash-link" href="#c61dc4d340ff46fa823d64806db74462" title="Loader和Plugin的区别"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>Loader和Plugin的区别</b></span></span></h2><div class="notion-text notion-block-7259e3f6fd914e4f9d63309c683268fd"><code class="notion-inline-code">Loader</code> 本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。
因为 Webpack 只认识 JavaScript，所以 Loader 就成了翻译官，对其他类型的资源进行转译的预处理工作。</div><div class="notion-text notion-block-0572472f6fd14065844d713ff543b1f2"><code class="notion-inline-code">Plugin</code> 就是插件，基于事件流框架 <code class="notion-inline-code">Tapable</code>，插件可以扩展 Webpack 的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</div><div class="notion-text notion-block-3040a612c2244fa3b86ce38bed9482fb"><code class="notion-inline-code">Loader</code> 在 module.rules 中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性。</div><div class="notion-text notion-block-c93632abaac84003b7c4f68c0adf5052"><code class="notion-inline-code">Plugin</code> 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的实例，参数都通过构造函数传入。</div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-3072ffe9934d4f1e8816282e373ccf81" data-id="3072ffe9934d4f1e8816282e373ccf81"><span><div id="3072ffe9934d4f1e8816282e373ccf81" class="notion-header-anchor"></div><a class="notion-hash-link" href="#3072ffe9934d4f1e8816282e373ccf81" title="source map是什么？生产环境怎么用？"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><b>source map是什么？生产环境怎么用？</b></span></span></h2><div class="notion-text notion-block-5729fad3cc5645b8a2f6ef3142737199"><code class="notion-inline-code">source map</code> 是将编译、打包、压缩后的代码映射回源代码的过程。打包压缩后的代码不具备良好的可读性，想要调试源码就需要 soucre map。</div><div class="notion-text notion-block-5052e3065b6c4ee9b6e69ba672c2225a">map文件只要不打开开发者工具，浏览器是不会加载的。</div><div class="notion-text notion-block-44dfce55c761449ea3f5aa73a3fc23c2">线上环境一般有三种处理方案：</div><ul class="notion-list notion-list-disc notion-block-78650192b7c04c3b9f4dac77a8b9fe6b"><li><code class="notion-inline-code">hidden-source-map</code>：借助第三方错误监控平台 Sentry 使用</li></ul><ul class="notion-list notion-list-disc notion-block-7c25ac1cc37743b68de09f1c4b96c91c"><li><code class="notion-inline-code">nosources-source-map</code>：只会显示具体行数以及查看源代码的错误栈。安全性比 sourcemap 高</li></ul><ul class="notion-list notion-list-disc notion-block-f65ea9a99a304b898daf166adbe5bf93"><li><code class="notion-inline-code">sourcemap</code>：通过 nginx 设置将 .map 文件只对白名单开放(公司内网)</li></ul><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-b2c19a1618ca478e9fe85d06ee3c6586" data-id="b2c19a1618ca478e9fe85d06ee3c6586"><span><div id="b2c19a1618ca478e9fe85d06ee3c6586" class="notion-header-anchor"></div><a class="notion-hash-link" href="#b2c19a1618ca478e9fe85d06ee3c6586" title="webpack 性能优化"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">webpack 性能优化</span></span></h2><ol start="1" class="notion-list notion-list-numbered notion-block-252f93d844d248e89596026f652d8666"><li>升级 webpack 版本，3升4，实测是提升了几十秒的打包速度</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-3a37c20c6dde43c294465d61e3c97d43"><li><code class="notion-inline-code">多进程/多实例构建</code>：thread-loader</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-ec3fd7372f3742a7b575c7aa8c0c3ac6"><li><code class="notion-inline-code">压缩代码</code>：通过对应的plugin来压缩css、js代码。</li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-67931409e93e440e84c88d614c8df9a9"><li><code class="notion-inline-code">图片压缩</code>：通过配置 image-webpack-loader。</li></ol><ol start="5" class="notion-list notion-list-numbered notion-block-bf719459106d4abeb88279855e431022"><li><code class="notion-inline-code">缩小打包作用域</code>：</li><ol class="notion-list notion-list-numbered notion-block-bf719459106d4abeb88279855e431022"><ul class="notion-list notion-list-disc notion-block-4db731bcdb5a45369087c608f3710443"><li>exclude/include (确定 loader 规则范围)</li></ul><ul class="notion-list notion-list-disc notion-block-b672647be1114280ae0e90c39baad0ac"><li>resolve.modules 指明第三方模块的绝对路径 (减少不必要的查找)</li></ul><ul class="notion-list notion-list-disc notion-block-2e786c7773c447b7b93c299fbab5b30e"><li>resolve.mainFields 只采用 main 字段作为入口文件描述字段 (减少搜索步骤，需要考虑到所有运行时依赖的第三方模块的入口文件描述字段)</li></ul><ul class="notion-list notion-list-disc notion-block-4a7dec55d6f44ff7ba9f765534564288"><li>resolve.extensions 尽可能减少后缀尝试的可能性</li></ul><ul class="notion-list notion-list-disc notion-block-7d3a6bdabc104d0a9c0440180c21b8cd"><li>noParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句)</li></ul><ul class="notion-list notion-list-disc notion-block-2aab4ff4a83246dab94855a2de040f9f"><li>IgnorePlugin (完全排除模块)</li></ul></ol></ol><ol start="6" class="notion-list notion-list-numbered notion-block-1c0aa7da6a1c4ffda459408fc724b441"><li><code class="notion-inline-code">充分利用缓存提升二次构建速度</code>：</li><ol class="notion-list notion-list-numbered notion-block-1c0aa7da6a1c4ffda459408fc724b441"><ul class="notion-list notion-list-disc notion-block-719c5f00677a4fd1941c92b7bb4133ad"><li>babel-loader 开启缓存</li></ul><ul class="notion-list notion-list-disc notion-block-608404fb2d324a7b89b6a47973a75510"><li>terser-webpack-plugin 开启缓存</li></ul><ul class="notion-list notion-list-disc notion-block-4906fc7fd3d8461db27be9f289da6e18"><li>使用 cache-loader 或者 hard-source-webpack-plugin</li></ul></ol></ol><ol start="7" class="notion-list notion-list-numbered notion-block-8cc58046f93643c5b42400854fc21caf"><li><code class="notion-inline-code">Tree shaking</code> ：ESM项目开启 useExport标记，使用 tree-shaking。</li></ol><ol start="8" class="notion-list notion-list-numbered notion-block-5c48d1d3087e413c9d16a73e610383b4"><li>gzip压缩：打包过程可以进行gzip压缩，优化静态资源文件的体积。</li></ol><div class="notion-blank notion-block-583a3840050f44e58f8bc347567dc2eb"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-35c0eb2ca01b4996b4fac8b5d8ef94c4" data-id="35c0eb2ca01b4996b4fac8b5d8ef94c4"><span><div id="35c0eb2ca01b4996b4fac8b5d8ef94c4" class="notion-header-anchor"></div><a class="notion-hash-link" href="#35c0eb2ca01b4996b4fac8b5d8ef94c4" title="代码分割"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">代码<b>分割</b></span></span></h2><div class="notion-text notion-block-f5c4aa19535a48fc91cea39e732d0325">代码分割的本质其实就是在<code class="notion-inline-code">源代码直接上线</code>和<code class="notion-inline-code">打包成唯一脚本main.bundle.js</code>这两种极端方案之间的一种更适合实际场景的中间状态。</div><div class="notion-text notion-block-a4b9d5608a9647dab30590a28f315183"><b>「用可接受的服务器性能压力增加来换取更好的用户体验。」</b></div><div class="notion-text notion-block-dd1df83945134f6c9af5088b18a7bf9e">源代码直接上线：虽然过程可控，但是http请求多，性能开销大。</div><div class="notion-text notion-block-8b1b5407ca694489942c67cf2f1999f1">打包成唯一脚本：一把梭完自己爽，服务器压力小，但是页面空白期长，用户体验不好。</div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-328e4f65c7224f84ad467722e253f293" data-id="328e4f65c7224f84ad467722e253f293"><span><div id="328e4f65c7224f84ad467722e253f293" class="notion-header-anchor"></div><a class="notion-hash-link" href="#328e4f65c7224f84ad467722e253f293" title="tree-sharking"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">tree-sharking</span></span></h2><div class="notion-text notion-block-99e14e72f5f241359f03f84ac6fe16f4">Tree shaking（摇树）是一种用于优化 JavaScript代码的技术，旨在通过静态分析的方式去除未使用的代码（dead code）从而减小最终的代码包大小。</div><div class="notion-text notion-block-b78653f0355845f4951ffede57f71c02">Tree shaking的实现原理如下：</div><ol start="1" class="notion-list notion-list-numbered notion-block-73652147af9f43d39ce753e58d9ddad6"><li>静态分析：Tree shaking利用es6的静态分析技术，分析模块之间的依赖关系，从入口模块开始递归地遍历整个模块依赖图。</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-b59c9872fee74da6bf32495abec0384d"><li>标记依赖：在遍历过程中，对于每个模块，通过识别模块中的导入（import）和导出（export）语句，标记出模块与模块之间的依赖关系。</li></ol><ol start="3" class="notion-list notion-list-numbered notion-block-585d8d5cdc754c359aa199038ed20771"><li>标记使用：在遍历过程中，对于每个模块，通过识别模块中的变量引用和函数调用，标记出实际被使用的代码。</li></ol><ol start="4" class="notion-list notion-list-numbered notion-block-ed19096c1a8d4352a72ecdcc7bd2a1f4"><li>剔除未使用的代码：根据标记的依赖和使用信息，从每个模块中剔除未被使用的代码。这样，最终的打包结果就不会包含未使用的代码，从而减小了代码的体积。</li></ol><div class="notion-text notion-block-9148d473bd4b44df938d6753c4c96807">Tree shaking的关键在于静态分析和标记依赖/使用的过程。通过这些分析和标记的信息，工具可以确定哪些代码是被使用的，哪些代码是未使用的，然后进行相应的优化。</div><div class="notion-text notion-block-5d75afbe59564a4bbaabd38ca6fa1b92">需要注意的是，Tree shaking只能消除那些静态可分析的未使用代码。对于动态导入（dynamic import）或通过字符串拼接等方式引入的模块，无法在构建时进行静态分析，因此无法进行有效的优化。在这种情况下，需要使用代码分割等技术来实现动态加载和按需加载的效果。</div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-07d01954d23c40fab9a56186b02a1c94" data-id="07d01954d23c40fab9a56186b02a1c94"><span><div id="07d01954d23c40fab9a56186b02a1c94" class="notion-header-anchor"></div><a class="notion-hash-link" href="#07d01954d23c40fab9a56186b02a1c94" title="Babel"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Babel</span></span></h2><div class="notion-text notion-block-f6499055ece74da8813d7c082048303d">大多数JavaScript Parser遵循 <code class="notion-inline-code">estree</code> 规范，Babel 最初基于 <code class="notion-inline-code">acorn</code> 项目(轻量级现代 JavaScript 解析器)
Babel大概分为三大部分：</div><ul class="notion-list notion-list-disc notion-block-0829489ae83f4ae399c55a361a2c5b0a"><li>解析：将代码转换成 AST</li><ul class="notion-list notion-list-disc notion-block-0829489ae83f4ae399c55a361a2c5b0a"><li>词法分析：将代码(字符串)分割为token流，即语法单元成的数组</li><li>语法分析：分析token流(上面生成的数组)并生成 AST</li></ul></ul><ul class="notion-list notion-list-disc notion-block-9374b71379de42099600de659fc46974"><li>转换：访问 AST 的节点进行变换操作生产新的 AST</li><ul class="notion-list notion-list-disc notion-block-9374b71379de42099600de659fc46974"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FNervJS%2Ftaro%2Fblob%2Fmaster%2Fpackages%2Ftaro-transformer-wx%2Fsrc%2Findex.ts%23L15">Taro</a>就是利用 babel 完成的小程序语法转换</li></ul></ul><ul class="notion-list notion-list-disc notion-block-cc37019df7334403a847c919443115ea"><li>生成：以新的 AST 为基础生成代码</li></ul><div class="notion-blank notion-block-14c218bcae3f4f49af8c59c0741e9124"> </div><div class="notion-blank notion-block-cbec16fef573425cbd342e5194ea32d4"> </div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-4ef7d34c8e1b48ca8ec51e81c058bd36" data-id="4ef7d34c8e1b48ca8ec51e81c058bd36"><span><div id="4ef7d34c8e1b48ca8ec51e81c058bd36" class="notion-header-anchor"></div><a class="notion-hash-link" href="#4ef7d34c8e1b48ca8ec51e81c058bd36" title="vite 为什么快"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">vite 为什么快</span></span></h2><ul class="notion-list notion-list-disc notion-block-fda69a9791cd4f93813c90e9a7e0d719"><li>按需动态编译。</li></ul><div class="notion-text notion-block-c0d8fc3a60d846d3bbecb355dd9c39d5">初始化时</div><ol start="1" class="notion-list notion-list-numbered notion-block-fb55966deec849f6909b800355b94d86"><li>webpack启动时，需要打包，先把所有文件build一遍，从入口开始遍历所有依赖文件，然后编译成打包后的多个js文件，最后打包到bundler里面。</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-e02d0c8fefab4e4eb51e907a9c4d2cc8"><li>vite启动时不需要打包，当浏览器需要哪个文件时，再对模块内容进行编译。利用现代浏览器本身支持esm，会自动的向依赖的module发送请求。</li></ol><div class="notion-text notion-block-4f162a9246274108a7ed0efd072ac8a8">热更新</div><ol start="1" class="notion-list notion-list-numbered notion-block-c9f93abbbb3542d0b5910cc77d9894d5"><li>webpack每次都需要把所有模块重新编译一遍，再把改动的模块发送给浏览器。</li></ol><ol start="2" class="notion-list notion-list-numbered notion-block-72de3cfe30a94b7398ecd6073f8157d1"><li>vite当改动某个模块时，仅需要让浏览器重新请求模块即可。</li></ol><ul class="notion-list notion-list-disc notion-block-d2c1d95b4a33489cadd7da36ab222b60"><li>esbuild构建</li></ul><div class="notion-text notion-block-10012fa0f2e847ffa646a45f3ed5695a">esbuild使用go语言编写，编译速度比用js编写的webpack 快10-100倍。</div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-33df6a6ec7504113b9fef4a0f4561792" href="https://cloud.tencent.com/developer/article/2130191"><div><div class="notion-bookmark-title">vite 为什么比 webpack 快？-腾讯云开发者社区-腾讯云</div><div class="notion-bookmark-description">实际开发体验中，大家都可以明显感觉到 rollup 都比 webpack 启动快多了，实际是什么原因？</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://cloud.tencent.com/favicon.ico?t=33df6a6e-c750-4113-b9fe-f4a0f4561792" alt="vite 为什么比 webpack 快？-腾讯云开发者社区-腾讯云" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://cloud.tencent.com/developer/article/2130191</div></div></div><div class="notion-bookmark-image"><img style="object-fit:cover" src="https://cloudcache.tencentcs.com/open_proj/proj_qcloud_v2/gateway/shareicons/cloud.png?t=33df6a6e-c750-4113-b9fe-f4a0f4561792" alt="vite 为什么比 webpack 快？-腾讯云开发者社区-腾讯云" loading="lazy" decoding="async"/></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-cd0b24d1f7d245fda71e26f111b519ae" href="https://juejin.cn/post/7291555833045549056?searchId=20231228223206E14714DEC50BBE8927A7"><div><div class="notion-bookmark-title">人人都说 vite 快，但它究竟为啥快？ - 掘金</div><div class="notion-bookmark-description">在前端技术一浪拍死一浪的洪流中，vite 已经逐渐取代 webpack 成为各大框架推荐的打包工具。 大家都说 vite 快，那它究竟为啥快呢？ 今天就和大家伙一起好好扒一扒 vite 的底细。 de</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/static/favicons/apple-touch-icon.png?t=cd0b24d1-f7d2-45fd-a71e-26f111b519ae" alt="人人都说 vite 快，但它究竟为啥快？ - 掘金" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://juejin.cn/post/7291555833045549056?searchId=20231228223206E14714DEC50BBE8927A7</div></div></div></a></div><h2 class="notion-h notion-h1 notion-h-indent-0 notion-block-b3e7e2f0591e4b3d91760efd9962b3f1" data-id="b3e7e2f0591e4b3d91760efd9962b3f1"><span><div id="b3e7e2f0591e4b3d91760efd9962b3f1" class="notion-header-anchor"></div><a class="notion-hash-link" href="#b3e7e2f0591e4b3d91760efd9962b3f1" title="webpack与vite区别"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">webpack与vite区别</span></span></h2><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-83388e12d9354c58a1d5bea6e9f7248d" data-id="83388e12d9354c58a1d5bea6e9f7248d"><span><div id="83388e12d9354c58a1d5bea6e9f7248d" class="notion-header-anchor"></div><a class="notion-hash-link" href="#83388e12d9354c58a1d5bea6e9f7248d" title="构建速度"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">构建速度</span></span></h3><div class="notion-text notion-block-27f73cbc820e48228add9e0ef290ca75">Webpack: Webpack的构建速度相对较慢，尤其在大型项目中，因为它需要分析整个依赖图，进行多次文件扫描和转译。</div><div class="notion-text notion-block-f5efc540f4c24491ae4f2fff36cfc781">Vite: Vite以开发模式下的极速构建著称。它利用ES模块的特性，只构建正在编辑的文件，而不是整个项目。这使得它在开发环境下几乎是即时的。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-154a34dd4f5449cdb1136b54a61644bd" data-id="154a34dd4f5449cdb1136b54a61644bd"><span><div id="154a34dd4f5449cdb1136b54a61644bd" class="notion-header-anchor"></div><a class="notion-hash-link" href="#154a34dd4f5449cdb1136b54a61644bd" title="开发模式"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">开发模式</span></span></h3><div class="notion-text notion-block-0ce6ce60ea4848f9acaf7a302c134732">Webpack: Webpack通常使用热模块替换（HMR）来实现快速开发模式，但配置相对复杂。</div><div class="notion-text notion-block-d9bb0ffa004544c9984f9ffe86b06e11">Vite: Vite的开发模式非常轻量且快速，支持HMR，但无需额外配置，因为它默认支持。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-77df5c6c3ce94c6ea2596ea74cc2cc52" data-id="77df5c6c3ce94c6ea2596ea74cc2cc52"><span><div id="77df5c6c3ce94c6ea2596ea74cc2cc52" class="notion-header-anchor"></div><a class="notion-hash-link" href="#77df5c6c3ce94c6ea2596ea74cc2cc52" title="配置复杂度"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">配置复杂度</span></span></h3><div class="notion-text notion-block-c7c05c704cfc46d1bb78a76cf2284d74">Webpack: Webpack的配置相对复杂，特别是在处理不同类型的资源和加载器时。</div><div class="notion-text notion-block-fa9abaed12ac40afa156bc86d5afc5b4">Vite: Vite鼓励零配置，使得项目起步非常简单，但同时也支持自定义配置，使其适用于复杂项目。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-b932fd769a94482ba5d802ab8eb11636" data-id="b932fd769a94482ba5d802ab8eb11636"><span><div id="b932fd769a94482ba5d802ab8eb11636" class="notion-header-anchor"></div><a class="notion-hash-link" href="#b932fd769a94482ba5d802ab8eb11636" title="插件生态"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">插件生态</span></span></h3><div class="notion-text notion-block-afc26faeeff64d0f83cb9d0524b8088d">Webpack: Webpack拥有庞大的插件生态系统，适用于各种不同的需求。</div><div class="notion-text notion-block-4ba12f94e1c445359ee714a03784f6a1">Vite: Vite也有相当数量的插件，但相对较小，因为它的开发模式和构建方式减少了对一些传统插件的需求。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-97c8a54090f04e948929b667eb320e56" data-id="97c8a54090f04e948929b667eb320e56"><span><div id="97c8a54090f04e948929b667eb320e56" class="notion-header-anchor"></div><a class="notion-hash-link" href="#97c8a54090f04e948929b667eb320e56" title="编译方式"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">编译方式</span></span></h3><div class="notion-text notion-block-a1e0210fa2474c97936717efa1673852">Webpack: Webpack使用了多种加载器和插件来处理不同类型的资源，如JavaScript、CSS、图片等。</div><div class="notion-text notion-block-3d595f56395443a992f06004391a1a28">Vite: Vite利用ES模块原生支持，使用原生浏览器导入来处理模块，不需要大规模的编译和打包。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-b4efe027e5ef4c858ef828401a87d34f" data-id="b4efe027e5ef4c858ef828401a87d34f"><span><div id="b4efe027e5ef4c858ef828401a87d34f" class="notion-header-anchor"></div><a class="notion-hash-link" href="#b4efe027e5ef4c858ef828401a87d34f" title="应用场景"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">应用场景</span></span></h3><div class="notion-text notion-block-b3f361da35594bcbad1bdb512b310649">Webpack: 适用于复杂的大型项目，特别是需要大量自定义配置和复杂构建管道的项目。</div><div class="notion-text notion-block-4f6dfea1a65d4904bf2284816e9a6f38">Vite: 更适用于小到中型项目，或者需要快速开发原型和小型应用的场景。</div><h3 class="notion-h notion-h2 notion-h-indent-1 notion-block-ecd469b3d938477f834fdfafe938ccd9" data-id="ecd469b3d938477f834fdfafe938ccd9"><span><div id="ecd469b3d938477f834fdfafe938ccd9" class="notion-header-anchor"></div><a class="notion-hash-link" href="#ecd469b3d938477f834fdfafe938ccd9" title="打包原理"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">打包原理</span></span></h3><div class="notion-text notion-block-29314592f4a24b378ad900185bccfbad">Webpack: Webpack的打包原理是将所有资源打包成一个或多个bundle文件，通常是一个JavaScript文件。</div><div class="notion-text notion-block-ed3a536545d44c679e58525fc8417266">Vite: Vite的打包原理是保持开发时的模块化结构，使用浏览器原生的导入机制，在生产环境中进行代码分割和优化</div><div class="notion-blank notion-block-31f78cace2504c34a52ebc20bffa458b"> </div><div class="notion-blank notion-block-9258bf4a3500413b9d6102d63d8e3390"> </div><div class="notion-blank notion-block-b877204bb58443668705ef420b1fa37e"> </div><div class="notion-blank notion-block-ec6d9a7452314105a53dd21eb2b3fef4"> </div><div class="notion-blank notion-block-60ee3435c6b14712924ffe622fd43e76"> </div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-e8b3f6f7c67c4899aa8cb3a5c827a494" href="https://juejin.cn/post/6844904094281236487?searchId=20231015141852A58DCD3C21846E5DD511#heading-3"><div><div class="notion-bookmark-title">「吐血整理」再来一打Webpack面试题 - 掘金</div><div class="notion-bookmark-description">本文已收录在Github github.com/Geekhyt，欢迎Star。 从头发的浓密程度和干练的走路姿势我察觉到，面前坐着的这位面试官也是一把好手。我像以往一样，准备花3分钟的时间进行自我介绍。在此期间，我的目光被16寸的MacBook Pro所吸引，这次的自我介绍我做…</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/static/favicons/apple-touch-icon.png?t=e8b3f6f7-c67c-4899-aa8c-b3a5c827a494" alt="「吐血整理」再来一打Webpack面试题 - 掘金" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://juejin.cn/post/6844904094281236487?searchId=20231015141852A58DCD3C21846E5DD511#heading-3</div></div></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-e2e82d6aa0294ac9adf7d262f159a275" href="https://webpack.wuhaolin.cn/"><div><div class="notion-bookmark-title">深入浅出 Webpack · 深入浅出 Webpack</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://webpack.wuhaolin.cn/gitbook/images/apple-touch-icon-precomposed-152.png?t=e2e82d6a-a029-4ac9-adf7-d262f159a275" alt="深入浅出 Webpack · 深入浅出 Webpack" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://webpack.wuhaolin.cn/</div></div></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-cd62f9b3aa044b12a461d6ffc3aac30f" href="https://juejin.cn/post/6844903651291447309#heading-11"><div><div class="notion-bookmark-title">三十分钟掌握Webpack性能优化 - 掘金</div><div class="notion-bookmark-description">Webpack是现在主流的功能强大的模块化打包工具，在使用Webpack时，如果不注意性能优化，有非常大的可能会产生性能问题，性能问题主要分为开发时打包构建速度慢、开发调试时的重复性工作、以及输出文件质量不高等，因此性能优化也主要从这些方面来分析。本文主要是根据自己的理解对《深…</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/static/favicons/apple-touch-icon.png?t=cd62f9b3-aa04-4b12-a461-d6ffc3aac30f" alt="三十分钟掌握Webpack性能优化 - 掘金" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://juejin.cn/post/6844903651291447309#heading-11</div></div></div></a></div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-4e00af2451784d208c68773506e3da68" href="https://febook.hzfe.org/awesome-interview/book3/engineer-webpack-loader"><div><div class="notion-bookmark-title">谈下 webpack loader 的机制 | HZFE - 剑指前端 Offer</div><div class="notion-bookmark-description">相关问题</div><div class="notion-bookmark-link"><div class="notion-bookmark-link-icon"><img src="https://febook.hzfe.org/awesome-interview/img/favicon.ico?t=4e00af24-5178-4d20-8c68-773506e3da68" alt="谈下 webpack loader 的机制 | HZFE - 剑指前端 Offer" loading="lazy" decoding="async"/></div><div class="notion-bookmark-link-text">https://febook.hzfe.org/awesome-interview/book3/engineer-webpack-loader</div></div></div></a></div></main></div>]]></content>
    </entry>
</feed>